console.log(`üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä...`);

const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const path = require('path');
const { Pool } = require('pg');
const crypto = require('crypto');
const multer = require('multer');
const { createClient } = require('@supabase/supabase-js');

const app = express();
const server = http.createServer(app);
const io = socketIo(server, {
    pingTimeout: 60000,
    pingInterval: 25000,
    transports: ['websocket', 'polling'],
    allowEIO3: true,
    cors: {
        origin: "*",
        methods: ["GET", "POST"]
    }
});

// ==================== SUPABASE CONFIGURATION ====================

const supabaseUrl = process.env.Cloud_Url;
const supabaseKey = process.env.Cloud_Key;

if (!supabaseUrl || !supabaseKey) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–µ–∫—Ä–µ—Ç—ã Supabase: Cloud_Url –∏ Cloud_Key');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.memoryStorage();
const upload = multer({
    storage: storage,
    limits: {
        fileSize: 5 * 1024 * 1024, // 5MB –º–∞–∫—Å–∏–º—É–º
    },
    fileFilter: (req, file, cb) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        if (file.mimetype.startsWith('image/')) {
            cb(null, true);
        } else {
            cb(new Error('–¢–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω—ã!'), false);
        }
    }
});

// ==================== –ö–†–ò–ü–¢–û–ì–†–ê–§–ò–ß–ï–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò ====================

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–ª–∏ –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
function generateSalt() {
    return crypto.randomBytes(32).toString('hex');
}

// –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è —Å —Å–æ–ª—å—é
function hashPassword(password, salt) {
    return crypto.pbkdf2Sync(password, salt, 100000, 64, 'sha512').toString('hex');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
function verifyPassword(password, hash, salt) {
    const hashToVerify = crypto.pbkdf2Sync(password, salt, 100000, 64, 'sha512').toString('hex');
    return hashToVerify === hash;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ (32 –±–∞–π—Ç–∞ –¥–ª—è AES-256)
function generateChatKey() {
    return crypto.randomBytes(32).toString('hex');
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è IV –¥–ª—è AES
function generateIV() {
    return crypto.randomBytes(16);
}

// –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
function encryptMessage(message, key) {
    try {
        const iv = generateIV();
        const cipher = crypto.createCipheriv('aes-256-cbc', Buffer.from(key, 'hex'), iv);
        let encrypted = cipher.update(message, 'utf8', 'hex');
        encrypted += cipher.final('hex');
        return iv.toString('hex') + ':' + encrypted;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        return message; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    }
}

// –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
function decryptMessage(encryptedMessage, key) {
    try {
        if (!encryptedMessage.includes(':')) {
            // –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            return encryptedMessage;
        }

        const parts = encryptedMessage.split(':');
        if (parts.length !== 2) {
            return encryptedMessage;
        }

        const iv = Buffer.from(parts[0], 'hex');
        const decipher = crypto.createDecipheriv('aes-256-cbc', Buffer.from(key, 'hex'), iv);
        let decrypted = decipher.update(parts[1], 'hex', 'utf8');
        decrypted += decipher.final('utf8');
        return decrypted;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        return encryptedMessage; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ ID —á–∞—Ç–∞ (—Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º user_id)
function createChatId(userId1, userId2) {
    const users = [userId1, userId2].sort((a, b) => a - b);
    return users.join('_');
}

// ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ê–í–ê–¢–ê–†–ö–ê–ú–ò ====================

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
function generateAvatarFileName(userId, originalExtension) {
    const timestamp = Date.now();
    const randomString = crypto.randomBytes(6).toString('hex');
    return `avatars/user_${userId}_${timestamp}_${randomString}.${originalExtension}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏ –≤ Supabase Storage
async function uploadAvatarToSupabase(fileBuffer, fileName, mimeType) {
    try {
        console.log(`üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –≤ Supabase: ${fileName}`);

        const { data, error } = await supabase.storage
            .from('avatars')
            .upload(fileName, fileBuffer, {
                contentType: mimeType,
                upsert: true
            });

        if (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Supabase Storage:', error);
            return null;
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL —Ñ–∞–π–ª–∞
        const { data: publicData } = supabase.storage
            .from('avatars')
            .getPublicUrl(fileName);

        console.log(`‚úÖ –ê–≤–∞—Ç–∞—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${publicData.publicUrl}`);
        return publicData.publicUrl;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤–∞—Ç–∞—Ä–∫–∏:', error);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–π –∞–≤–∞—Ç–∞—Ä–∫–∏ –∏–∑ Supabase Storage
async function deleteOldAvatarFromSupabase(avatarUrl) {
    if (!avatarUrl) return;

    try {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ URL
        const urlParts = avatarUrl.split('/');
        const fileName = urlParts[urlParts.length - 1];

        if (fileName && fileName.includes('_')) {
            const fullPath = `avatars/${fileName}`;

            const { error } = await supabase.storage
                .from('avatars')
                .remove([fullPath]);

            if (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–π –∞–≤–∞—Ç–∞—Ä–∫–∏:', error);
            } else {
                console.log(`üóëÔ∏è –°—Ç–∞—Ä–∞—è –∞–≤–∞—Ç–∞—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∞: ${fullPath}`);
            }
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–π –∞–≤–∞—Ç–∞—Ä–∫–∏:', error);
    }
}

// ==================== –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –ë–î ====================

const pool = new Pool({
    connectionString: process.env.DataStoreKey,
    ssl: {
        rejectUnauthorized: false
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function initDatabase() {
    try {
        console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

        // –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å user_id –∫–∞–∫ PRIMARY KEY
        await pool.query(`
            CREATE TABLE IF NOT EXISTS users (
                user_id SERIAL PRIMARY KEY,
                username VARCHAR(50) UNIQUE NOT NULL,
                password_hash VARCHAR(255) NOT NULL,
                password_salt VARCHAR(64) NOT NULL,
                display_name VARCHAR(100) NOT NULL,
                description TEXT DEFAULT '',
                avatar_url TEXT DEFAULT '',
                registered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                last_seen TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        `);

        // –î–æ–±–∞–≤–ª—è–µ–º user_id –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç (–¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏)
        await pool.query(`
            DO $$ 
            BEGIN 
                IF NOT EXISTS (
                    SELECT 1 FROM information_schema.columns 
                    WHERE table_name = 'users' AND column_name = 'user_id'
                ) THEN
                    ALTER TABLE users ADD COLUMN user_id SERIAL PRIMARY KEY;
                END IF;
            END $$
        `);

        // –¢–∞–±–ª–∏—Ü–∞ —Å–µ—Å—Å–∏–π (—Ç–µ–ø–µ—Ä—å —Å user_id)
        await pool.query(`
            CREATE TABLE IF NOT EXISTS user_sessions (
                ip VARCHAR(45) PRIMARY KEY,
                user_id INTEGER NOT NULL,
                session_token VARCHAR(100) NOT NULL,
                expires_at TIMESTAMP NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
            )
        `);

        // –¢–∞–±–ª–∏—Ü–∞ —á–∞—Ç–æ–≤ —Å user_id
        await pool.query(`
            CREATE TABLE IF NOT EXISTS chats (
                chat_id VARCHAR(100) PRIMARY KEY,
                user1_id INTEGER NOT NULL,
                user2_id INTEGER NOT NULL,
                encryption_key VARCHAR(64) NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user1_id) REFERENCES users(user_id) ON DELETE CASCADE,
                FOREIGN KEY (user2_id) REFERENCES users(user_id) ON DELETE CASCADE
            )
        `);

        // –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å user_id
        await pool.query(`
            CREATE TABLE IF NOT EXISTS messages (
                id SERIAL PRIMARY KEY,
                chat_id VARCHAR(100) NOT NULL,
                from_user_id INTEGER NOT NULL,
                encrypted_message TEXT NOT NULL,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (chat_id) REFERENCES chats(chat_id) ON DELETE CASCADE,
                FOREIGN KEY (from_user_id) REFERENCES users(user_id) ON DELETE CASCADE
            )
        `);

        // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        await pool.query(`CREATE INDEX IF NOT EXISTS idx_messages_chat_id ON messages(chat_id)`);
        await pool.query(`CREATE INDEX IF NOT EXISTS idx_messages_timestamp ON messages(timestamp)`);
        await pool.query(`CREATE INDEX IF NOT EXISTS idx_user_sessions_expires ON user_sessions(expires_at)`);
        await pool.query(`CREATE INDEX IF NOT EXISTS idx_users_username ON users(username)`);

        // –ú–∏–≥—Ä–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        await migrateToUserIdSystem();

        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π user_id');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
        process.exit(1);
    }
}

// –ú–∏–≥—Ä–∞—Ü–∏—è –∫ —Å–∏—Å—Ç–µ–º–µ user_id
async function migrateToUserIdSystem() {
    try {
        console.log('üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∫ —Å–∏—Å—Ç–µ–º–µ user_id...');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è user_sessions
        const sessionColumns = await pool.query(`
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name = 'user_sessions' AND column_name = 'username'
        `);

        if (sessionColumns.rows.length > 0) {
            console.log('üîÑ –ú–∏–≥—Ä–∏—Ä—É–µ–º user_sessions...');

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü user_id
            await pool.query(`ALTER TABLE user_sessions ADD COLUMN IF NOT EXISTS user_id INTEGER`);

            // –ó–∞–ø–æ–ª–Ω—è–µ–º user_id –Ω–∞ –æ—Å–Ω–æ–≤–µ username
            await pool.query(`
                UPDATE user_sessions 
                SET user_id = (SELECT user_id FROM users WHERE users.username = user_sessions.username)
                WHERE user_id IS NULL
            `);

            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –±–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await pool.query(`DELETE FROM user_sessions WHERE user_id IS NULL`);

            // –î–æ–±–∞–≤–ª—è–µ–º NOT NULL constraint
            await pool.query(`ALTER TABLE user_sessions ALTER COLUMN user_id SET NOT NULL`);

            // –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á
            await pool.query(`
                ALTER TABLE user_sessions 
                ADD CONSTRAINT fk_user_sessions_user_id 
                FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
            `);

            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Å—Ç–æ–ª–±–µ—Ü username
            await pool.query(`ALTER TABLE user_sessions DROP COLUMN IF EXISTS username`);

            console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è user_sessions –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è chats
        const chatColumns = await pool.query(`
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name = 'chats' AND column_name = 'user1'
        `);

        if (chatColumns.rows.length > 0) {
            console.log('üîÑ –ú–∏–≥—Ä–∏—Ä—É–µ–º chats...');

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã
            await pool.query(`ALTER TABLE chats ADD COLUMN IF NOT EXISTS user1_id INTEGER`);
            await pool.query(`ALTER TABLE chats ADD COLUMN IF NOT EXISTS user2_id INTEGER`);

            // –ó–∞–ø–æ–ª–Ω—è–µ–º user_id –Ω–∞ –æ—Å–Ω–æ–≤–µ username
            await pool.query(`
                UPDATE chats 
                SET user1_id = (SELECT user_id FROM users WHERE users.username = chats.user1),
                    user2_id = (SELECT user_id FROM users WHERE users.username = chats.user2)
                WHERE user1_id IS NULL OR user2_id IS NULL
            `);

            // –û–±–Ω–æ–≤–ª—è–µ–º chat_id –Ω–∞ –æ—Å–Ω–æ–≤–µ user_id
            await pool.query(`
                UPDATE chats 
                SET chat_id = LEAST(user1_id, user2_id)::text || '_' || GREATEST(user1_id, user2_id)::text
                WHERE user1_id IS NOT NULL AND user2_id IS NOT NULL
            `);

            // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await pool.query(`DELETE FROM chats WHERE user1_id IS NULL OR user2_id IS NULL`);

            // –î–æ–±–∞–≤–ª—è–µ–º NOT NULL constraints –∏ –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏
            await pool.query(`ALTER TABLE chats ALTER COLUMN user1_id SET NOT NULL`);
            await pool.query(`ALTER TABLE chats ALTER COLUMN user2_id SET NOT NULL`);

            await pool.query(`
                ALTER TABLE chats 
                ADD CONSTRAINT fk_chats_user1_id 
                FOREIGN KEY (user1_id) REFERENCES users(user_id) ON DELETE CASCADE
            `);
            await pool.query(`
                ALTER TABLE chats 
                ADD CONSTRAINT fk_chats_user2_id 
                FOREIGN KEY (user2_id) REFERENCES users(user_id) ON DELETE CASCADE
            `);

            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å—Ç–æ–ª–±—Ü—ã
            await pool.query(`ALTER TABLE chats DROP COLUMN IF EXISTS user1`);
            await pool.query(`ALTER TABLE chats DROP COLUMN IF EXISTS user2`);

            console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è chats –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è messages
        const messageColumns = await pool.query(`
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name = 'messages' AND column_name = 'from_user'
        `);

        if (messageColumns.rows.length > 0) {
            console.log('üîÑ –ú–∏–≥—Ä–∏—Ä—É–µ–º messages...');

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
            await pool.query(`ALTER TABLE messages ADD COLUMN IF NOT EXISTS from_user_id INTEGER`);

            // –ó–∞–ø–æ–ª–Ω—è–µ–º user_id –Ω–∞ –æ—Å–Ω–æ–≤–µ username
            await pool.query(`
                UPDATE messages 
                SET from_user_id = (SELECT user_id FROM users WHERE users.username = messages.from_user)
                WHERE from_user_id IS NULL
            `);

            // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await pool.query(`DELETE FROM messages WHERE from_user_id IS NULL`);

            // –î–æ–±–∞–≤–ª—è–µ–º NOT NULL constraint –∏ –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á
            await pool.query(`ALTER TABLE messages ALTER COLUMN from_user_id SET NOT NULL`);

            await pool.query(`
                ALTER TABLE messages 
                ADD CONSTRAINT fk_messages_from_user_id 
                FOREIGN KEY (from_user_id) REFERENCES users(user_id) ON DELETE CASCADE
            `);

            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Å—Ç–æ–ª–±–µ—Ü
            await pool.query(`ALTER TABLE messages DROP COLUMN IF EXISTS from_user`);

            console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è messages –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        }

        console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∫ —Å–∏—Å—Ç–µ–º–µ user_id –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∫ —Å–∏—Å—Ç–µ–º–µ user_id:', error);
        // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
    }
}

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–µ–ø–µ—Ä—å –ø–æ user_id)
const onlineUsersByIP = new Map();
const userSockets = new Map(); // —Ç–µ–ø–µ—Ä—å –∫–ª—é—á - user_id
const connectedSockets = new Map();
const chatKeys = new Map(); // –ö–µ—à –∫–ª—é—á–µ–π —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —á–∞—Ç–æ–≤

app.use(express.static(path.join(__dirname, 'public')));
app.use(express.json());

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ username
function normalizeUsername(username) {
    return username.startsWith('@') ? username.substring(1) : username;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è IP –∞–¥—Ä–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞
function getClientIP(req) {
    return req.headers['x-forwarded-for']?.split(',')[0]?.trim() || 
           req.connection.remoteAddress || 
           req.socket.remoteAddress ||
           (req.connection.socket ? req.connection.socket.remoteAddress : null);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞ —Å–µ—Å—Å–∏–∏
function generateSessionToken() {
    return crypto.randomBytes(32).toString('hex');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ (—Ç–µ–ø–µ—Ä—å —Å user_id)
async function createSession(ip, userId) {
    try {
        const sessionToken = generateSessionToken();
        const expiresAt = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000); // 30 –¥–Ω–µ–π

        await pool.query(
            'INSERT INTO user_sessions (ip, user_id, session_token, expires_at) VALUES ($1, $2, $3, $4) ON CONFLICT (ip) DO UPDATE SET user_id = $2, session_token = $3, expires_at = $4, created_at = CURRENT_TIMESTAMP',
            [ip, userId, sessionToken, expiresAt]
        );

        console.log(`üîê –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è –¥–ª—è user_id ${userId} (IP: ${ip}), –∏—Å—Ç–µ–∫–∞–µ—Ç: ${expiresAt.toLocaleString('ru-RU')}`);
        return sessionToken;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏ (—Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç user_id)
async function checkSession(ip) {
    try {
        const result = await pool.query(
            'SELECT us.user_id, us.expires_at, u.username, u.display_name, u.description, u.registered_at, u.avatar_url FROM user_sessions us JOIN users u ON us.user_id = u.user_id WHERE us.ip = $1',
            [ip]
        );

        if (result.rows.length === 0) {
            return null;
        }

        const session = result.rows[0];

        if (new Date() > new Date(session.expires_at)) {
            console.log(`‚è∞ –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞ –¥–ª—è IP: ${ip}`);
            await pool.query('DELETE FROM user_sessions WHERE ip = $1', [ip]);
            return null;
        }

        console.log(`‚úÖ –í–∞–ª–∏–¥–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è user_id ${session.user_id} (IP: ${ip})`);
        return {
            userId: session.user_id,
            username: session.username,
            displayName: session.display_name,
            description: session.description,
            registeredAt: session.registered_at,
            avatar: session.avatar_url
        };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏:', error);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
async function removeSession(ip) {
    try {
        const result = await pool.query('DELETE FROM user_sessions WHERE ip = $1 RETURNING user_id', [ip]);
        if (result.rows.length > 0) {
            console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è user_id ${result.rows[0].user_id} (IP: ${ip})`);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
    }
}

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —á–∞—Ç–∞
async function getChatEncryptionKey(chatId) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    if (chatKeys.has(chatId)) {
        console.log(`üîë –ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω –≤ –∫–µ—à–µ –¥–ª—è —á–∞—Ç–∞: ${chatId}`);
        return chatKeys.get(chatId);
    }

    try {
        const result = await pool.query('SELECT encryption_key FROM chats WHERE chat_id = $1', [chatId]);

        if (result.rows.length > 0 && result.rows[0].encryption_key) {
            const key = result.rows[0].encryption_key;
            chatKeys.set(chatId, key); // –ö–µ—à–∏—Ä—É–µ–º –∫–ª—é—á
            console.log(`üîë –ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω –≤ –ë–î –¥–ª—è —á–∞—Ç–∞: ${chatId}`);
            return key;
        }

        console.log(`‚ö†Ô∏è –ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —á–∞—Ç–∞: ${chatId}`);
        return null;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —á–∞—Ç–∞:', error);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ "–±—ã–ª –≤ —Å–µ—Ç–∏" —Å —É—á–µ—Ç–æ–º UTC
function formatLastSeen(lastSeenTime) {
    if (!lastSeenTime) return '–î–∞–≤–Ω–æ –Ω–µ –±—ã–ª(–∞) –≤ —Å–µ—Ç–∏';

    const now = new Date();
    const lastSeen = new Date(lastSeenTime);
    const diffMs = now - lastSeen;
    const diffMinutes = Math.floor(diffMs / (1000 * 60));
    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
    const diffWeeks = Math.floor(diffDays / 7);
    const diffMonths = Math.floor(diffDays / 30);
    const diffYears = Math.floor(diffDays / 365);

    if (diffMinutes < 1) {
        return '–¢–æ–ª—å–∫–æ —á—Ç–æ –±—ã–ª(–∞) –≤ —Å–µ—Ç–∏';
    }

    if (diffMinutes < 60) {
        return `–ë—ã–ª(–∞) –≤ —Å–µ—Ç–∏ ${diffMinutes} –º–∏–Ω. –Ω–∞–∑–∞–¥`;
    }

    if (diffHours < 24) {
        return `–ë—ã–ª(–∞) –≤ —Å–µ—Ç–∏ —Å–µ–≥–æ–¥–Ω—è`;
    }

    if (diffDays === 1) {
        return `–ë—ã–ª(–∞) –≤ —Å–µ—Ç–∏ –≤—á–µ—Ä–∞`;
    }

    if (diffDays < 7) {
        return `–ë—ã–ª(–∞) –≤ —Å–µ—Ç–∏ ${diffDays} –¥–Ω. –Ω–∞–∑–∞–¥`;
    }

    if (diffWeeks < 4) {
        return diffWeeks === 1 ? '–ë—ã–ª(–∞) –≤ —Å–µ—Ç–∏ –Ω–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥' : `–ë—ã–ª(–∞) –≤ —Å–µ—Ç–∏ ${diffWeeks} –Ω–µ–¥. –Ω–∞–∑–∞–¥`;
    }

    if (diffMonths < 12) {
        return diffMonths === 1 ? '–ë—ã–ª(–∞) –≤ —Å–µ—Ç–∏ –º–µ—Å—è—Ü –Ω–∞–∑–∞–¥' : `–ë—ã–ª(–∞) –≤ —Å–µ—Ç–∏ ${diffMonths} –º–µ—Å. –Ω–∞–∑–∞–¥`;
    }

    if (diffYears >= 1) {
        return diffYears === 1 ? '–ë—ã–ª(–∞) –≤ —Å–µ—Ç–∏ –≥–æ–¥ –Ω–∞–∑–∞–¥' : `–ë—ã–ª(–∞) –≤ —Å–µ—Ç–∏ ${diffYears} –ª–µ—Ç –Ω–∞–∑–∞–¥`;
    }

    return `–ë—ã–ª(–∞) –≤ —Å–µ—Ç–∏ –¥–∞–≤–Ω–æ`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–µ–ø–µ—Ä—å –ø–æ user_id)
function isUserOnline(userId) {
    for (const [ip, data] of onlineUsersByIP) {
        if (data.userId === userId) {
            const timeSinceLastActivity = Date.now() - data.lastActivity;
            return timeSinceLastActivity < 120000; // 2 –º–∏–Ω—É—Ç—ã
        }
    }
    return false;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–µ–ø–µ—Ä—å –ø–æ user_id)
async function getUserStatus(userId) {
    const isOnline = isUserOnline(userId);
    if (isOnline) {
        return { isOnline: true, lastSeenText: '–í —Å–µ—Ç–∏' };
    }

    try {
        const result = await pool.query('SELECT last_seen FROM users WHERE user_id = $1', [userId]);
        const lastSeen = result.rows.length > 0 ? result.rows[0].last_seen : null;
        const lastSeenText = formatLastSeen(lastSeen);
        return { isOnline: false, lastSeenText };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        return { isOnline: false, lastSeenText: '–î–∞–≤–Ω–æ –Ω–µ –±—ã–ª(–∞) –≤ —Å–µ—Ç–∏' };
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function updateUserActivity(userId, socketId, ip) {
    if (onlineUsersByIP.has(ip)) {
        onlineUsersByIP.get(ip).lastActivity = Date.now();
    }

    if (connectedSockets.has(socketId)) {
        connectedSockets.get(socketId).lastPing = Date.now();
    }
}

// ==================== API –≠–ù–î–ü–û–ò–ù–¢–´ ====================

// Health check endpoint
app.get('/health', async (req, res) => {
    const uptime = Math.floor(process.uptime());
    const memoryUsage = process.memoryUsage();
    const activeConnections = connectedSockets.size;
    const onlineUsers = onlineUsersByIP.size;

    res.json({
        status: 'OK',
        uptime: uptime,
        timestamp: new Date().toISOString(),
        memory: {
            used: Math.round(memoryUsage.heapUsed / 1024 / 1024) + 'MB',
            total: Math.round(memoryUsage.heapTotal / 1024 / 1024) + 'MB'
        },
        connections: {
            sockets: activeConnections,
            users: onlineUsers
        }
    });
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
app.get('/stats', async (req, res) => {
    try {
        const userCount = await pool.query('SELECT COUNT(*) as count FROM users');
        const messageCount = await pool.query('SELECT COUNT(*) as count FROM messages');
        const chatCount = await pool.query('SELECT COUNT(*) as count FROM chats');
        const activeSessionsCount = await pool.query('SELECT COUNT(*) as count FROM user_sessions WHERE expires_at > CURRENT_TIMESTAMP');

        res.json({
            server: {
                uptime: Math.floor(process.uptime()),
                active_connections: connectedSockets.size,
                online_users: onlineUsersByIP.size
            },
            database: {
                total_users: parseInt(userCount.rows[0].count),
                total_messages: parseInt(messageCount.rows[0].count),
                total_chats: parseInt(chatCount.rows[0].count),
                active_sessions: parseInt(activeSessionsCount.rows[0].count)
            },
            memory: process.memoryUsage()
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

app.get('/check-session', async (req, res) => {
    const clientIP = getClientIP(req);
    const user = await checkSession(clientIP);

    if (user) {
        res.json({ success: true, user });
    } else {
        res.json({ success: false });
    }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏
app.post('/upload-avatar', upload.single('avatar'), async (req, res) => {
    const clientIP = getClientIP(req);

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const result = await pool.query('SELECT user_id FROM user_sessions WHERE ip = $1 AND expires_at > CURRENT_TIMESTAMP', [clientIP]);
        if (result.rows.length === 0) {
            return res.json({ success: false, message: '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞' });
        }

        const userId = result.rows[0].user_id;

        if (!req.file) {
            return res.json({ success: false, message: '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω' });
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        const originalName = req.file.originalname;
        const extension = originalName.split('.').pop().toLowerCase();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        const allowedExtensions = ['jpg', 'jpeg', 'png', 'gif', 'webp'];
        if (!allowedExtensions.includes(extension)) {
            return res.json({ success: false, message: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞' });
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∞–≤–∞—Ç–∞—Ä–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        const currentAvatarResult = await pool.query('SELECT avatar_url FROM users WHERE user_id = $1', [userId]);
        const currentAvatarUrl = currentAvatarResult.rows.length > 0 ? currentAvatarResult.rows[0].avatar_url : null;

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        const fileName = generateAvatarFileName(userId, extension);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—É—é –∞–≤–∞—Ç–∞—Ä–∫—É –≤ Supabase
        const avatarUrl = await uploadAvatarToSupabase(req.file.buffer, fileName, req.file.mimetype);

        if (!avatarUrl) {
            return res.json({ success: false, message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ –æ–±–ª–∞–∫–æ' });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º URL –∞–≤–∞—Ç–∞—Ä–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await pool.query('UPDATE users SET avatar_url = $1 WHERE user_id = $2', [avatarUrl, userId]);

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∞–≤–∞—Ç–∞—Ä–∫—É –∏–∑ Supabase (–µ—Å–ª–∏ –±—ã–ª–∞)
        if (currentAvatarUrl && currentAvatarUrl !== avatarUrl) {
            await deleteOldAvatarFromSupabase(currentAvatarUrl);
        }

        console.log(`üñºÔ∏è –ê–≤–∞—Ç–∞—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user_id ${userId}`);

        res.json({ 
            success: true, 
            avatarPath: avatarUrl,
            message: '–ê–≤–∞—Ç–∞—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞'
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏:', error);
        res.json({ success: false, message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

app.post('/logout', async (req, res) => {
    const clientIP = getClientIP(req);

    try {
        const result = await pool.query('SELECT us.user_id, u.username FROM user_sessions us JOIN users u ON us.user_id = u.user_id WHERE us.ip = $1', [clientIP]);

        if (result.rows.length > 0) {
            const { user_id: userId, username } = result.rows[0];

            await removeSession(clientIP);
            await pool.query('UPDATE users SET last_seen = CURRENT_TIMESTAMP WHERE user_id = $1', [userId]);

            onlineUsersByIP.delete(clientIP);
            userSockets.delete(userId);

            const socketData = userSockets.get(userId);
            if (socketData) {
                const socket = io.sockets.sockets.get(socketData.socketId);
                if (socket) {
                    socket.disconnect(true);
                }
                connectedSockets.delete(socketData.socketId);
            }

            console.log(`üö™ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª: ${username} (user_id: ${userId}, IP: ${clientIP})`);

            const status = await getUserStatus(userId);
            io.emit('user-status-changed', { 
                userId,
                username, 
                isOnline: false,
                lastSeenText: status.lastSeenText 
            });
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }

    res.json({ success: true });
});

app.post('/change-password', async (req, res) => {
    const { currentPassword, newPassword } = req.body;
    const clientIP = getClientIP(req);

    if (!currentPassword || !newPassword) {
        return res.json({ success: false, message: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è' });
    }

    if (newPassword.length < 6) {
        return res.json({ success: false, message: '–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤' });
    }

    try {
        const result = await pool.query('SELECT user_id FROM user_sessions WHERE ip = $1 AND expires_at > CURRENT_TIMESTAMP', [clientIP]);
        if (result.rows.length === 0) {
            return res.json({ success: false, message: '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞' });
        }

        const userId = result.rows[0].user_id;

        const userResult = await pool.query('SELECT password_hash, password_salt FROM users WHERE user_id = $1', [userId]);
        if (userResult.rows.length === 0) {
            return res.json({ success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        const { password_hash, password_salt } = userResult.rows[0];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
        if (!verifyPassword(currentPassword, password_hash, password_salt)) {
            return res.json({ success: false, message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å' });
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ö–µ—à –ø–∞—Ä–æ–ª—è
        const newSalt = generateSalt();
        const newHashedPassword = hashPassword(newPassword, newSalt);

        await pool.query('UPDATE users SET password_hash = $1, password_salt = $2 WHERE user_id = $3', [newHashedPassword, newSalt, userId]);

        console.log(`üîê –ü–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user_id ${userId} (IP: ${clientIP})`);
        res.json({ success: true, message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω' });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è:', error);
        res.json({ success: false, message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

app.post('/register', async (req, res) => {
    let { username, password, displayName } = req.body;

    if (!username || !password || !displayName) {
        return res.json({ success: false, message: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è' });
    }

    username = normalizeUsername(username);

    try {
        const existingUser = await pool.query('SELECT username FROM users WHERE username = $1', [username]);
        if (existingUser.rows.length > 0) {
            return res.json({ success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
        }

        // –°–æ–∑–¥–∞–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
        const salt = generateSalt();
        const hashedPassword = hashPassword(password, salt);

        // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π user_id
        const nextIdResult = await pool.query('SELECT COALESCE(MAX(user_id), 0) + 1 as next_id FROM users');
        const nextId = nextIdResult.rows[0].next_id;

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∞–≤–∞—Ç–∞—Ä–∫—É –≤ Supabase
        let defaultAvatarUrl = '';
        try {
            const fs = require('fs');
            const path = require('path');

            const defaultAvatarPath = path.join(__dirname, 'user-icon.png');

            if (fs.existsSync(defaultAvatarPath)) {
                const fileBuffer = fs.readFileSync(defaultAvatarPath);
                const fileName = `avatars/default_user_${nextId}_${Date.now()}.png`;

                console.log(`üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∞–≤–∞—Ç–∞—Ä–∫—É –¥–ª—è user_id ${nextId}`);

                const { data, error } = await supabase.storage
                    .from('avatars')
                    .upload(fileName, fileBuffer, {
                        contentType: 'image/png',
                        upsert: false
                    });

                if (!error) {
                    const { data: publicData } = supabase.storage
                        .from('avatars')
                        .getPublicUrl(fileName);

                    defaultAvatarUrl = publicData.publicUrl;
                    console.log(`‚úÖ –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –∞–≤–∞—Ç–∞—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${defaultAvatarUrl}`);
                } else {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∞–≤–∞—Ç–∞—Ä–∫–∏:', error);
                }
            } else {
                console.warn(`‚ö†Ô∏è –§–∞–π–ª user-icon.png –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞`);
            }
        } catch (avatarError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∞–≤–∞—Ç–∞—Ä–∫–∏:', avatarError);
        }

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∞–≤–∞—Ç–∞—Ä–∫–æ–π
        const insertResult = await pool.query(
            'INSERT INTO users (username, password_hash, password_salt, display_name, avatar_url) VALUES ($1, $2, $3, $4, $5) RETURNING user_id',
            [username, hashedPassword, salt, displayName, defaultAvatarUrl]
        );

        const userId = insertResult.rows[0].user_id;

        console.log(`‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${username} (user_id: ${userId}, IP: ${getClientIP(req)}) —Å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∞–≤–∞—Ç–∞—Ä–∫–æ–π`);
        res.json({ success: true });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        res.json({ success: false, message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

app.post('/login', async (req, res) => {
    let { username, password } = req.body;
    const clientIP = getClientIP(req);

    username = normalizeUsername(username);

    try {
        const result = await pool.query(
            'SELECT user_id, username, password_hash, password_salt, display_name, description, registered_at, avatar_url FROM users WHERE username = $1',
            [username]
        );

        if (result.rows.length === 0) {
            return res.json({ success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        const user = result.rows[0];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
        if (!verifyPassword(password, user.password_hash, user.password_salt)) {
            return res.json({ success: false, message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' });
        }

        await pool.query('UPDATE users SET last_seen = CURRENT_TIMESTAMP WHERE user_id = $1', [user.user_id]);
        await createSession(clientIP, user.user_id);

        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª: ${username} (user_id: ${user.user_id}, IP: ${clientIP})`);
        res.json({ 
            success: true, 
            user: {
                userId: user.user_id,
                username: user.username,
                displayName: user.display_name,
                description: user.description,
                registeredAt: user.registered_at,
                avatar: user.avatar_url
            }
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
        res.json({ success: false, message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

app.post('/search-users', async (req, res) => {
    const { query } = req.body;

    if (!query) {
        return res.json([]);
    }

    try {
        const searchQuery = `%${query.toLowerCase()}%`;
        const result = await pool.query(
            'SELECT user_id, username, display_name, description, last_seen, avatar_url FROM users WHERE LOWER(username) LIKE $1 OR LOWER(display_name) LIKE $1 ORDER BY username',
            [searchQuery]
        );

        const results = [];
        for (const user of result.rows) {
            const status = await getUserStatus(user.user_id);
            results.push({
                userId: user.user_id,
                username: user.username,
                displayName: user.display_name,
                description: user.description,
                isOnline: status.isOnline,
                lastSeen: status.isOnline ? null : user.last_seen,
                lastSeenText: status.lastSeenText,
                avatar: user.avatar_url
            });
        }

        res.json(results);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        res.json([]);
    }
});

app.post('/users-status', async (req, res) => {
    const { userIds } = req.body;

    if (!userIds || !Array.isArray(userIds)) {
        return res.json({ success: false, message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å' });
    }

    try {
        const results = [];
        for (const userId of userIds) {
            const userResult = await pool.query('SELECT username, last_seen FROM users WHERE user_id = $1', [userId]);
            if (userResult.rows.length > 0) {
                const status = await getUserStatus(userId);
                results.push({
                    userId: userId,
                    username: userResult.rows[0].username,
                    isOnline: status.isOnline,
                    lastSeenText: status.lastSeenText,
                    lastSeen: status.isOnline ? null : userResult.rows[0].last_seen
                });
            }
        }

        res.json({ success: true, users: results });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        res.json({ success: false, message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

app.get('/user-chats/:userId', async (req, res) => {
    const { userId } = req.params;

    try {
        const userCheck = await pool.query('SELECT user_id FROM users WHERE user_id = $1', [userId]);
        if (userCheck.rows.length === 0) {
            return res.json({ success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        const result = await pool.query(`
            SELECT 
                c.chat_id,
                c.encryption_key,
                CASE WHEN c.user1_id = $1 THEN c.user2_id ELSE c.user1_id END as other_user_id,
                u.username as other_username,
                u.display_name,
                u.description,
                u.last_seen,
                u.avatar_url,
                (
                    SELECT json_build_object(
                        'text', m.encrypted_message,
                        'timestamp', m.timestamp,
                        'from_user_id', m.from_user_id
                    )
                    FROM messages m 
                    WHERE m.chat_id = c.chat_id 
                    ORDER BY m.timestamp DESC 
                    LIMIT 1
                ) as last_message,
                (
                    SELECT m.timestamp 
                    FROM messages m 
                    WHERE m.chat_id = c.chat_id 
                    ORDER BY m.timestamp DESC 
                    LIMIT 1
                ) as last_message_time
            FROM chats c
            JOIN users u ON (CASE WHEN c.user1_id = $1 THEN c.user2_id ELSE c.user1_id END) = u.user_id
            WHERE c.user1_id = $1 OR c.user2_id = $1
            ORDER BY last_message_time DESC NULLS LAST
        `, [userId]);

        const chats = [];
        for (const row of result.rows) {
            const status = await getUserStatus(row.other_user_id);

            // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            let lastMessage = row.last_message;
            if (lastMessage && lastMessage.text && row.encryption_key) {
                const decryptedText = decryptMessage(lastMessage.text, row.encryption_key);
                lastMessage = {
                    ...lastMessage,
                    text: decryptedText
                };
            }

            chats.push({
                userId: row.other_user_id,
                username: row.other_username,
                displayName: row.display_name,
                description: row.description,
                isOnline: status.isOnline,
                lastSeen: status.isOnline ? null : row.last_seen,
                lastSeenText: status.lastSeenText,
                lastMessage: lastMessage,
                chatId: row.chat_id,
                avatar: row.avatar_url
            });
        }

        res.json({ success: true, chats });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤:', error);
        res.json({ success: false, message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

app.get('/profile/:identifier', async (req, res) => {
    const { identifier } = req.params;

    try {
        let result;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ identifier —á–∏—Å–ª–æ–º (user_id) –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π (username)
        if (/^\d+$/.test(identifier)) {
            // –≠—Ç–æ user_id
            result = await pool.query(
                'SELECT user_id, username, display_name, description, registered_at, last_seen, avatar_url FROM users WHERE user_id = $1',
                [parseInt(identifier)]
            );
        } else {
            // –≠—Ç–æ username
            const normalizedUsername = normalizeUsername(identifier);
            result = await pool.query(
                'SELECT user_id, username, display_name, description, registered_at, last_seen, avatar_url FROM users WHERE username = $1',
                [normalizedUsername]
            );
        }

        if (result.rows.length === 0) {
            return res.json({ success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        const user = result.rows[0];
        const status = await getUserStatus(user.user_id);

        res.json({
            success: true,
            profile: {
                userId: user.user_id,
                username: user.username,
                displayName: user.display_name,
                description: user.description,
                registeredAt: user.registered_at,
                isOnline: status.isOnline,
                lastSeen: status.isOnline ? null : user.last_seen,
                lastSeenText: status.lastSeenText,
                avatar: user.avatar_url
            }
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
        res.json({ success: false, message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∏–∑–º–µ–Ω–µ–Ω–∏—è username
app.post('/update-profile', async (req, res) => {
    const { username, displayName, description } = req.body;
    const clientIP = getClientIP(req);

    if (!displayName) {
        return res.json({ success: false, message: '–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' });
    }

    try {
        // –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ —Å–µ—Å—Å–∏–∏
        const sessionResult = await pool.query('SELECT user_id FROM user_sessions WHERE ip = $1 AND expires_at > CURRENT_TIMESTAMP', [clientIP]);
        if (sessionResult.rows.length === 0) {
            return res.json({ success: false, message: '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞' });
        }

        const userId = sessionResult.rows[0].user_id;

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userResult = await pool.query('SELECT username FROM users WHERE user_id = $1', [userId]);
        if (userResult.rows.length === 0) {
            return res.json({ success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        const oldUsername = userResult.rows[0].username;
        let newUsername = oldUsername;

        // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –Ω–æ–≤—ã–π username, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        if (username && normalizeUsername(username) !== oldUsername) {
            newUsername = normalizeUsername(username);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –Ω–æ–≤—ã–π username
            const existingUser = await pool.query('SELECT user_id FROM users WHERE username = $1 AND user_id != $2', [newUsername, userId]);
            if (existingUser.rows.length > 0) {
                return res.json({ success: false, message: '–≠—Ç–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç–æ' });
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        await pool.query(
            'UPDATE users SET username = $1, display_name = $2, description = $3 WHERE user_id = $4', 
            [newUsername, displayName, description || '', userId]
        );

        console.log(`‚úèÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–∏–ª –ø—Ä–æ—Ñ–∏–ª—å: user_id ${userId} (${oldUsername} -> ${newUsername}) (IP: ${clientIP})`);

        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const result = await pool.query(
            'SELECT user_id, username, display_name, description, registered_at, avatar_url FROM users WHERE user_id = $1', 
            [userId]
        );
        const updatedUser = result.rows[0];

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
        io.emit('user-profile-updated', {
            userId: userId,
            username: newUsername,
            oldUsername: oldUsername !== newUsername ? oldUsername : null,
            profile: {
                userId: updatedUser.user_id,
                username: updatedUser.username,
                displayName: updatedUser.display_name,
                description: updatedUser.description,
                registeredAt: updatedUser.registered_at,
                avatar: updatedUser.avatar_url
            }
        });

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        res.json({ 
            success: true, 
            user: {
                userId: updatedUser.user_id,
                username: updatedUser.username,
                displayName: updatedUser.display_name,
                description: updatedUser.description,
                registeredAt: updatedUser.registered_at,
                avatar: updatedUser.avatar_url
            }
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
        res.json({ success: false, message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º user_id
async function ensureChatExists(userId1, userId2) {
    const chatId = createChatId(userId1, userId2);

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —á–∞—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º ID
        const existingChat = await pool.query(
            'SELECT chat_id, encryption_key FROM chats WHERE chat_id = $1', 
            [chatId]
        );

        if (existingChat.rows.length > 0 && existingChat.rows[0].encryption_key) {
            // –ö–µ—à–∏—Ä—É–µ–º –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
            chatKeys.set(chatId, existingChat.rows[0].encryption_key);
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç: ${chatId} —Å –∫–ª—é—á–æ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è`);
            return chatId;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —á–∞—Ç –º–µ–∂–¥—É —ç—Ç–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Å –¥—Ä—É–≥–∏–º ID
        const possibleChats = await pool.query(
            'SELECT chat_id, encryption_key FROM chats WHERE (user1_id = $1 AND user2_id = $2) OR (user1_id = $2 AND user2_id = $1)', 
            [userId1, userId2]
        );

        if (possibleChats.rows.length > 0) {
            const existingChat = possibleChats.rows[0];

            // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —á–∞—Ç —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º ID, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
            if (existingChat.chat_id !== chatId) {
                console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º ID —á–∞—Ç–∞: ${existingChat.chat_id} -> ${chatId}`);

                await pool.query('BEGIN');
                try {
                    // –û–±–Ω–æ–≤–ª—è–µ–º chat_id –≤ —Ç–∞–±–ª–∏—Ü–µ chats
                    await pool.query(
                        'UPDATE chats SET chat_id = $1 WHERE chat_id = $2', 
                        [chatId, existingChat.chat_id]
                    );

                    // –û–±–Ω–æ–≤–ª—è–µ–º chat_id –≤–æ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
                    await pool.query(
                        'UPDATE messages SET chat_id = $1 WHERE chat_id = $2', 
                        [chatId, existingChat.chat_id]
                    );

                    await pool.query('COMMIT');

                    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
                    if (chatKeys.has(existingChat.chat_id)) {
                        const key = chatKeys.get(existingChat.chat_id);
                        chatKeys.delete(existingChat.chat_id);
                        chatKeys.set(chatId, key);
                    } else {
                        chatKeys.set(chatId, existingChat.encryption_key);
                    }

                    console.log(`‚úÖ ID —á–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: ${existingChat.chat_id} -> ${chatId} —Å –∫–ª—é—á–æ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è`);
                } catch (error) {
                    await pool.query('ROLLBACK');
                    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ID —á–∞—Ç–∞:', error);
                }
            } else {
                // –ß–∞—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º ID, –∫–µ—à–∏—Ä—É–µ–º –∫–ª—é—á
                chatKeys.set(chatId, existingChat.encryption_key);
                console.log(`‚úÖ –ß–∞—Ç ${chatId} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å –∫–ª—é—á–æ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è`);
            }

            return chatId;
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∫–ª—é—á–æ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        const encryptionKey = generateChatKey();

        await pool.query(
            'INSERT INTO chats (chat_id, user1_id, user2_id, encryption_key) VALUES ($1, $2, $3, $4)',
            [chatId, userId1, userId2, encryptionKey]
        );

        console.log(`üîê –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —á–∞—Ç: ${chatId} –º–µ–∂–¥—É user_id ${userId1} –∏ ${userId2} —Å –∫–ª—é—á–æ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è`);

        // –ö–µ—à–∏—Ä—É–µ–º –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        chatKeys.set(chatId, encryptionKey);

        return chatId;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–ø—Ä–æ–≤–µ—Ä–∫–∏ —á–∞—Ç–∞:', error);
        return chatId;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ IP
async function disconnectUserByIP(ip, reason = 'disconnect') {
    const userData = onlineUsersByIP.get(ip);
    if (userData) {
        const { userId, socketId } = userData;

        try {
            await pool.query('UPDATE users SET last_seen = CURRENT_TIMESTAMP WHERE user_id = $1', [userId]);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏—è:', error);
        }

        onlineUsersByIP.delete(ip);
        userSockets.delete(userId);
        connectedSockets.delete(socketId);

        console.log(`üî¥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è –ø–æ IP: user_id ${userId} (${ip}) - ${reason}`);
        return userId;
    }
    return null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
async function cleanupInactiveConnections() {
    const now = Date.now();
    const inactiveUsers = [];
    const timeoutDuration = 300000; // 5 –º–∏–Ω—É—Ç

    for (const [ip, data] of onlineUsersByIP) {
        if (now - data.lastActivity > timeoutDuration) {
            inactiveUsers.push({ ip, userId: data.userId, reason: 'activity_timeout' });
        }
    }

    for (const [socketId, data] of connectedSockets) {
        if (now - data.lastPing > timeoutDuration) {
            const socket = io.sockets.sockets.get(socketId);
            if (socket) {
                const ip = getClientIP(socket.handshake);
                if (!inactiveUsers.find(user => user.ip === ip)) {
                    inactiveUsers.push({ ip, userId: data.userId, reason: 'ping_timeout' });
                }
            } else {
                connectedSockets.delete(socketId);
            }
        }
    }

    for (const { ip, userId, reason } of inactiveUsers) {
        const disconnectedUserId = await disconnectUserByIP(ip, reason);
        if (disconnectedUserId) {
            const status = await getUserStatus(disconnectedUserId);
            // –ü–æ–ª—É—á–∞–µ–º username –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            const userResult = await pool.query('SELECT username FROM users WHERE user_id = $1', [disconnectedUserId]);
            const username = userResult.rows.length > 0 ? userResult.rows[0].username : null;

            io.emit('user-status-changed', { 
                userId: disconnectedUserId,
                username,
                isOnline: false,
                lastSeenText: status.lastSeenText 
            });
        }
    }

    if (inactiveUsers.length > 0) {
        console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${inactiveUsers.length} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π`);
    }
}

setInterval(cleanupInactiveConnections, 60000);

setInterval(async () => {
   try {
       const result = await pool.query('DELETE FROM user_sessions WHERE expires_at < CURRENT_TIMESTAMP RETURNING user_id, ip');

       if (result.rows.length > 0) {
           console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${result.rows.length} –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π`);
           result.rows.forEach(session => {
               console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –∏—Å—Ç–µ–∫—à–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è user_id ${session.user_id} (IP: ${session.ip})`);
           });
       }
   } catch (error) {
       console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π:', error);
   }
}, 60 * 60 * 1000);

// ==================== SOCKET.IO –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ====================

io.on('connection', (socket) => {
   const clientIP = getClientIP(socket.handshake);
   console.log(`üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ${socket.id} (IP: ${clientIP})`);

   socket.emit('connection-confirmed', { 
       connectionType: 'new',
       socketId: socket.id 
   });

   socket.on('user-online', async (userData) => {
       const { userId, username } = userData;

       const existingSocket = userSockets.get(userId);
       if (existingSocket && existingSocket.socketId !== socket.id) {
           const oldSocket = io.sockets.sockets.get(existingSocket.socketId);
           if (oldSocket) {
               console.log(`üîÑ –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è user_id ${userId}: ${existingSocket.socketId}`);
               oldSocket.disconnect(true);
           }
           connectedSockets.delete(existingSocket.socketId);
       }

       const existingData = onlineUsersByIP.get(clientIP);
       if (existingData) {
           existingData.userId = userId;
           existingData.username = username;
           existingData.socketId = socket.id;
           existingData.lastActivity = Date.now();
       } else {
           onlineUsersByIP.set(clientIP, {
               userId,
               username,
               socketId: socket.id,
               lastActivity: Date.now()
           });
       }

       userSockets.set(userId, { socketId: socket.id, ip: clientIP });
       connectedSockets.set(socket.id, { 
           userId,
           username, 
           ip: clientIP, 
           lastPing: Date.now() 
       });

       console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} (user_id: ${userId}) –æ–Ω–ª–∞–π–Ω —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º (${socket.id}, IP: ${clientIP})`);

       if (existingSocket) {
           socket.emit('connection-confirmed', { 
               connectionType: 'reconnected',
               socketId: socket.id 
           });
       }

       io.emit('user-status-changed', { 
           userId,
           username, 
           isOnline: true,
           lastSeenText: '–í —Å–µ—Ç–∏'
       });
   });

   socket.on('user-active', async () => {
       const userData = onlineUsersByIP.get(clientIP);
       if (userData) {
           userData.lastActivity = Date.now();

           const socketData = connectedSockets.get(socket.id);
           if (socketData) {
               socketData.lastPing = Date.now();
           }

           io.emit('user-status-changed', { 
               userId: userData.userId,
               username: userData.username, 
               isOnline: true,
               lastSeenText: '–í —Å–µ—Ç–∏'
           });
       }
   });

   socket.on('user-inactive', () => {
       const userData = onlineUsersByIP.get(clientIP);
       if (userData) {
           console.log(`üò¥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω: ${userData.username} (user_id: ${userData.userId}, ${clientIP})`);
       }
   });

   socket.on('user-offline', async () => {
       const userId = await disconnectUserByIP(clientIP, 'user_request');
       if (userId) {
           const status = await getUserStatus(userId);
           // –ü–æ–ª—É—á–∞–µ–º username –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
           const userResult = await pool.query('SELECT username FROM users WHERE user_id = $1', [userId]);
           const username = userResult.rows.length > 0 ? userResult.rows[0].username : null;

           io.emit('user-status-changed', { 
               userId,
               username,
               isOnline: false,
               lastSeenText: status.lastSeenText 
           });
       }
   });

   socket.on('subscribe-to-statuses', async (userIds) => {
       console.log(`üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—É—Å—ã: ${userIds.join(', ')}`);

       const statuses = [];
       for (const userId of userIds) {
           const status = await getUserStatus(userId);
           const userResult = await pool.query('SELECT username FROM users WHERE user_id = $1', [userId]);
           const username = userResult.rows.length > 0 ? userResult.rows[0].username : null;

           statuses.push({
               userId: userId,
               username: username,
               isOnline: status.isOnline,
               lastSeenText: status.lastSeenText
           });
       }

       socket.emit('users-status-update', { users: statuses });
   });

   socket.on('subscribe-to-status', async (userId) => {
       console.log(`üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—É—Å: user_id ${userId}`);

       const status = await getUserStatus(userId);
       const userResult = await pool.query('SELECT username FROM users WHERE user_id = $1', [userId]);
       const username = userResult.rows.length > 0 ? userResult.rows[0].username : null;

       socket.emit('user-status-changed', {
           userId: userId,
           username: username,
           isOnline: status.isOnline,
           lastSeenText: status.lastSeenText
       });
   });

   socket.on('profile-updated', (data) => {
       const { userId, username, oldUsername, profile } = data;
       console.log(`üìù –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç user_id ${userId} (${username}):`, profile);

       socket.broadcast.emit('user-profile-updated', {
           userId,
           username,
           oldUsername,
           profile
       });
   });

   socket.on('avatar-updated', (data) => {
       const { userId, username, avatar } = data;
       console.log(`üñºÔ∏è –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏ –æ—Ç user_id ${userId} (${username}):`, avatar);

       socket.broadcast.emit('user-avatar-updated', {
           userId,
           username,
           avatar
       });
   });

   socket.on('join-chat', async (chatId) => {
       socket.join(chatId);

       const userData = onlineUsersByIP.get(clientIP);
       if (userData) {
           userData.lastActivity = Date.now();
       }

       const socketData = connectedSockets.get(socket.id);
       if (socketData) {
           socketData.lastPing = Date.now();
       }

       console.log(`üí¨ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É: ${chatId}`);

       try {
           // –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —á–∞—Ç–∞
           let encryptionKey = await getChatEncryptionKey(chatId);

           if (!encryptionKey) {
               console.error(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —á–∞—Ç–∞: ${chatId}`);

               // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç –µ—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω
               const chatParts = chatId.split('_');
               if (chatParts.length === 2) {
                   const userId1 = parseInt(chatParts[0]);
                   const userId2 = parseInt(chatParts[1]);

                   if (!isNaN(userId1) && !isNaN(userId2)) {
                       console.log(`üîß –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç: ${chatId}`);
                       await ensureChatExists(userId1, userId2);

                       // –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á
                       encryptionKey = await getChatEncryptionKey(chatId);
                       if (encryptionKey) {
                           console.log(`‚úÖ –ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω –¥–ª—è —á–∞—Ç–∞: ${chatId}`);
                       }
                   }
               }

               if (!encryptionKey) {
                   socket.emit('chat-history', []);
                   return;
               }
           }

           // –ü–æ–ª—É—á–∞–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
           const result = await pool.query(`
               SELECT m.from_user_id, m.encrypted_message, m.timestamp, u.username 
               FROM messages m
               JOIN users u ON m.from_user_id = u.user_id
               WHERE m.chat_id = $1 
               ORDER BY m.timestamp ASC
           `, [chatId]);

           // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∫–ª–∏–µ–Ω—Ç—É
           const chatMessages = result.rows.map(row => {
               const decryptedMessage = decryptMessage(row.encrypted_message, encryptionKey);
               return {
                   fromUserId: row.from_user_id,
                   from: row.username,
                   message: decryptedMessage,
                   timestamp: row.timestamp
               };
           });

           socket.emit('chat-history', chatMessages);
           console.log(`üîì –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ ${chatId} (${chatMessages.length} —Å–æ–æ–±—â–µ–Ω–∏–π)`);
       } catch (error) {
           console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—â–∏—â–µ–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞:', error);
           socket.emit('chat-history', []);
       }
   });

   socket.on('send-message', async (data) => {
       const { chatId, message, fromUserId, toUserId } = data;

       updateUserActivity(fromUserId, socket.id, clientIP);

       // –ü–æ–ª—É—á–∞–µ–º username –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
       const fromUserResult = await pool.query('SELECT username FROM users WHERE user_id = $1', [fromUserId]);
       const fromUsername = fromUserResult.rows.length > 0 ? fromUserResult.rows[0].username : null;

       io.emit('user-status-changed', { 
           userId: fromUserId,
           username: fromUsername, 
           isOnline: true,
           lastSeenText: '–í —Å–µ—Ç–∏'
       });

       const messageData = {
           fromUserId,
           from: fromUsername,
           message,
           timestamp: new Date().toISOString()
       };

       try {
           // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∑–∞—â–∏—â–µ–Ω–Ω—ã–π —á–∞—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
           await ensureChatExists(fromUserId, toUserId);

           const existingChatForRecipient = await pool.query(
               'SELECT COUNT(*) as count FROM messages WHERE chat_id = $1 AND from_user_id = $2',
               [chatId, toUserId]
           );

           const isNewChatForRecipient = parseInt(existingChatForRecipient.rows[0].count) === 0;

           // –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —á–∞—Ç–∞
           const encryptionKey = await getChatEncryptionKey(chatId);

           if (!encryptionKey) {
               console.error(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —á–∞—Ç–∞: ${chatId}`);
               socket.emit('message-error', { error: '–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è' });
               return;
           }

           // –®–∏—Ñ—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
           const encryptedMessage = encryptMessage(message, encryptionKey);

           // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
           await pool.query(
               'INSERT INTO messages (chat_id, from_user_id, encrypted_message) VALUES ($1, $2, $3)',
               [chatId, fromUserId, encryptedMessage]
           );

           console.log(`üîê –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: user_id ${fromUserId} -> ${toUserId} –≤ —á–∞—Ç–µ ${chatId}`);

           // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –≤ —á–∞—Ç–µ
           io.to(chatId).emit('new-message', messageData);

           if (isNewChatForRecipient) {
               const recipientSocket = userSockets.get(toUserId);
               if (recipientSocket) {
                   const recipientSocketObj = io.sockets.sockets.get(recipientSocket.socketId);
                   if (recipientSocketObj) {
                       recipientSocketObj.emit('new-chat-notification', {
                           fromUserId,
                           from: fromUsername,
                           chatId,
                           message: messageData
                       });
                   }
               }
           }
       } catch (error) {
           console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
           socket.emit('message-error', { error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ' });
       }
   });

   socket.on('ping', async () => {
       const userData = onlineUsersByIP.get(clientIP);
       if (userData) {
           userData.lastActivity = Date.now();
       }

       const socketData = connectedSockets.get(socket.id);
       if (socketData) {
           socketData.lastPing = Date.now();
       }

       socket.emit('pong');
   });

   socket.on('disconnect', async (reason) => {
       console.log(`üî¥ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${socket.id} (IP: ${clientIP}) - ${reason}`);

       connectedSockets.delete(socket.id);

       setTimeout(async () => {
           const userData = onlineUsersByIP.get(clientIP);

           if (userData && userData.socketId === socket.id) {
               const userId = await disconnectUserByIP(clientIP, `socket_${reason}`);
               if (userId) {
                   const status = await getUserStatus(userId);
                   // –ü–æ–ª—É—á–∞–µ–º username –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                   const userResult = await pool.query('SELECT username FROM users WHERE user_id = $1', [userId]);
                   const username = userResult.rows.length > 0 ? userResult.rows[0].username : null;

                   io.emit('user-status-changed', { 
                       userId,
                       username,
                       isOnline: false,
                       lastSeenText: status.lastSeenText 
                   });
               }
           }
       }, 5000);
   });

   socket.on('error', (error) => {
       console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è ${socket.id}:`, error);
   });
});

// ==================== GRACEFUL SHUTDOWN ====================

process.on('SIGTERM', async () => {
   console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –Ω–∞—á–∏–Ω–∞–µ–º graceful shutdown...');

   for (const [ip, userData] of onlineUsersByIP) {
       try {
           await pool.query('UPDATE users SET last_seen = CURRENT_TIMESTAMP WHERE user_id = $1', [userData.userId]);
       } catch (error) {
           console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è last_seen –ø—Ä–∏ shutdown:', error);
       }
   }

   io.close(() => {
       console.log('‚úÖ –°–æ–∫–µ—Ç —Å–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç');

       server.close(() => {
           console.log('‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç');

           pool.end(() => {
               console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ-–¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
               process.exit(0);
           });
       });
   });
});

process.on('SIGINT', async () => {
   console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT (Ctrl+C)');
   process.emit('SIGTERM');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–µ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on('uncaughtException', (error) => {
   console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
   // –ù–ï –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
});

process.on('unhandledRejection', (reason, promise) => {
   console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
   // –ù–ï –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
});

// ==================== –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ====================

initDatabase().then(() => {
   const PORT = process.env.Port || 3000;

   // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ keep-alive –¥–ª—è HTTP —Å–µ—Ä–≤–µ—Ä–∞
   server.keepAliveTimeout = 120000; // 2 –º–∏–Ω—É—Ç—ã
   server.headersTimeout = 120000;   // 2 –º–∏–Ω—É—Ç—ã

   server.listen(PORT, () => {
       console.log(`‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É: ${PORT}`);
       console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!`);
   });
}).catch((error) => {
   console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
   process.exit(1);
});
