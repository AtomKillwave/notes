// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let socket;
let currentUser = null;
let currentChat = null;
let currentChatId = null;
let isLoginMode = true;
let activeChats = new Map();
let isMobile = window.innerWidth < 768;
let isConnected = false;
let reconnectAttempts = 0;
let maxReconnectAttempts = 10;
let pingInterval = null;
let statusUpdateInterval = null;
let lastActivity = Date.now();
let reconnectInterval = null;
let isReconnecting = false;

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const authScreen = document.getElementById('authScreen');
const mainApp = document.getElementById('mainApp');
const authTitle = document.getElementById('authTitle');
const authBtn = document.getElementById('authBtn');
const switchBtn = document.getElementById('switchBtn');
const authError = document.getElementById('authError');
const usernameInput = document.getElementById('username');
const passwordInput = document.getElementById('password');
const displayNameInput = document.getElementById('displayName');
const currentUserSpan = document.getElementById('currentUser');
const userSearch = document.getElementById('userSearch');
const chatsList = document.getElementById('chatsList');
const chatArea = document.getElementById('chatArea');
const chatHeader = document.getElementById('chatHeader');
const chatTitle = document.getElementById('chatTitle');
const chatAvatar = document.getElementById('chatAvatar');
const chatAvatarContainer = document.querySelector('.chat-avatar-container');
const chatMessages = document.getElementById('chatMessages');
const chatInput = document.getElementById('chatInput');
const messageInput = document.getElementById('messageInput');
const sendBtn = document.getElementById('sendBtn');
const profileBtn = document.getElementById('profileBtn');
const chatProfileBtn = document.getElementById('chatProfileBtn');
const settingsBtn = document.getElementById('settingsBtn');
const profileModal = document.getElementById('profileModal');
const profileSettingsModal = document.getElementById('profileSettingsModal');
const closeModal = document.getElementById('closeModal');
const closeProfileSettingsModal = document.getElementById('closeProfileSettingsModal');
const profileInfo = document.getElementById('profileInfo');
const backBtn = document.getElementById('backBtn');
const sidebar = document.getElementById('sidebar');

// –ù–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
const settingsArea = document.getElementById('settingsArea');
const settingsBackBtn = document.getElementById('settingsBackBtn');
const logoutBtn = document.getElementById('logoutBtn');

// –≠–ª–µ–º–µ–Ω—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Ñ–∏–ª—è
const profileSettingsDisplayName = document.getElementById('profileSettingsDisplayName');
const profileSettingsDescription = document.getElementById('profileSettingsDescription');
const saveProfileSettingsBtn = document.getElementById('saveProfileSettingsBtn');
const profileSettingsError = document.getElementById('profileSettingsError');

// –ù–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
const passwordChangeModal = document.getElementById('passwordChangeModal');
const closePasswordChangeModal = document.getElementById('closePasswordChangeModal');
const currentPassword = document.getElementById('currentPassword');
const newPassword = document.getElementById('newPassword');
const confirmPassword = document.getElementById('confirmPassword');
const changePasswordBtn = document.getElementById('changePasswordBtn');
const passwordChangeError = document.getElementById('passwordChangeError');

// –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∫–∏
const avatarPreview = document.getElementById('avatarPreview');
const avatarOverlay = document.getElementById('avatarOverlay');
const avatarInput = document.getElementById('avatarInput');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    checkExistingSession();
    initializeAvatarUpload();
});

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏
async function checkExistingSession() {
    try {
        const response = await fetch('/check-session');
        const data = await response.json();

        if (data.success && data.user) {
            console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è:', data.user.username);
            currentUser = data.user;
            initializeApp();
        } else {
            console.log('‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            authScreen.style.display = 'flex';
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏:', error);
        authScreen.style.display = 'flex';
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
function initializeAvatarUpload() {
    if (avatarOverlay && avatarInput) {
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ—Å—Ç–∏
        const triggerFileSelect = (e) => {
            e.preventDefault();
            e.stopPropagation();

            // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤—ã–±–æ—Ä –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–±–æ—Ä–∞ —Ç–æ–≥–æ –∂–µ —Ñ–∞–π–ª–∞
            avatarInput.value = '';

            // –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ –∫–ª–∏–∫–∞–µ–º –ø–æ input
            avatarInput.click();
        };

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è desktop
        avatarOverlay.addEventListener('click', triggerFileSelect);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        avatarOverlay.addEventListener('touchstart', (e) => {
            e.preventDefault();
        });

        avatarOverlay.addEventListener('touchend', triggerFileSelect);

        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
        avatarOverlay.addEventListener('touchstart', () => {
            avatarOverlay.style.opacity = '0.7';
        });

        avatarOverlay.addEventListener('touchend', () => {
            avatarOverlay.style.opacity = '1';
        });

        avatarOverlay.addEventListener('mousedown', () => {
            avatarOverlay.style.opacity = '0.7';
        });

        avatarOverlay.addEventListener('mouseup', () => {
            avatarOverlay.style.opacity = '1';
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        avatarInput.addEventListener('change', handleAvatarUpload);

        // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ input –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
        avatarInput.setAttribute('accept', 'image/*');
        avatarInput.setAttribute('capture', 'environment'); // –î–ª—è –∫–∞–º–µ—Ä—ã –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
    }
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏
async function handleAvatarUpload(event) {
    const file = event.target.files[0];
    if (!file) return;

    console.log('üì∑ –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª:', file.name, '–†–∞–∑–º–µ—Ä:', file.size);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if (!file.type.startsWith('image/')) {
        showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', profileSettingsError);
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 5MB)
    if (file.size > 5 * 1024 * 1024) {
        showError('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB', profileSettingsError);
        return;
    }

    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
        const reader = new FileReader();
        reader.onload = (e) => {
            avatarPreview.src = e.target.result;
            avatarPreview.classList.remove('default');

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è overlay —á–µ—Ä–µ–∑ CSS
            avatarOverlay.classList.add('has-image');
        };
        reader.readAsDataURL(file);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const formData = new FormData();
        formData.append('avatar', file);

        const response = await fetch('/upload-avatar', {
            method: 'POST',
            body: formData
        });

        const data = await response.json();

        if (data.success) {
            console.log('‚úÖ –ê–≤–∞—Ç–∞—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', data.avatarPath);
            currentUser.avatar = data.avatarPath;
            updateAvatarsEverywhere();

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è overlay –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            avatarOverlay.classList.add('has-image');

            setTimeout(() => {
                hideError(profileSettingsError);
            }, 3000);
        } else {
            showError(data.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏', profileSettingsError);

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∞–≤–∞—Ç–∞—Ä–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            restorePreviousAvatar();
            // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
            avatarOverlay.classList.remove('has-image');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏:', error);
        showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏', profileSettingsError);

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∞–≤–∞—Ç–∞—Ä–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        restorePreviousAvatar();
        // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
        avatarOverlay.classList.remove('has-image');
    } finally {
        // –£–±–∏—Ä–∞–µ–º inline —Å—Ç–∏–ª–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        avatarOverlay.style.opacity = '';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–∫ –≤–µ–∑–¥–µ
function updateAvatarsEverywhere() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
    if (currentUser.avatar) {
        avatarPreview.src = currentUser.avatar;
        avatarPreview.classList.remove('default');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
    displayChatsList();

    // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —á–∞—Ç –æ—Ç–∫—Ä—ã—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    if (currentChat === currentUser.username && chatAvatar) {
        updateChatAvatar(currentUser.username, currentUser.avatar);
    }

    // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏
    if (socket && isConnected) {
        socket.emit('avatar-updated', {
            username: currentUser.username,
            avatar: currentUser.avatar
        });
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ —á–∞—Ç–æ–≤
function getUserAvatar(username, avatar) {
    if (avatar && avatar !== '') {
        return `<img class="chat-item-avatar" src="${avatar}" alt="${username}">`;
    } else {
        const initial = username.charAt(0).toUpperCase();
        return `<div class="chat-item-avatar default">${initial}</div>`;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ —á–∞—Ç–∞
function getChatAvatar(username, avatar) {
    if (avatar && avatar !== '') {
        return `<img class="chat-avatar" src="${avatar}" alt="${username}">`;
    } else {
        const initial = username.charAt(0).toUpperCase();
        return `<div class="chat-avatar default">${initial}</div>`;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
function getProfileAvatar(username, avatar) {
    if (avatar && avatar !== '') {
        return `<img class="profile-avatar" src="${avatar}" alt="${username}">`;
    } else {
        const initial = username.charAt(0).toUpperCase();
        return `<div class="profile-avatar default">${initial}</div>`;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ —á–∞—Ç–∞
function updateChatAvatar(username, avatar) {
    if (chatAvatar) {
        if (avatar && avatar !== '') {
            chatAvatar.src = avatar;
            chatAvatar.classList.remove('default');
            chatAvatar.alt = username;
        } else {
            chatAvatar.src = '';
            chatAvatar.classList.add('default');
            chatAvatar.innerHTML = username.charAt(0).toUpperCase();
        }
    }
}

// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞
window.addEventListener('resize', () => {
    const wasDesktop = !isMobile;
    isMobile = window.innerWidth < 768;

    if (wasDesktop && !isMobile) {
        chatArea.classList.remove('active');
        settingsArea.classList.remove('active');
    }

    if (!wasDesktop && isMobile && currentChat) {
        chatArea.classList.add('active');
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è –æ—à–∏–±–æ–∫
function showError(message, errorElement = authError) {
    errorElement.textContent = message;
    errorElement.style.display = 'block';
    errorElement.style.color = '#E74C3C';
}

function showSuccess(message, errorElement = authError) {
    errorElement.textContent = message;
    errorElement.style.display = 'block';
    errorElement.style.color = '#27AE60';
}

function hideError(errorElement = authError) {
    errorElement.style.display = 'none';
    errorElement.textContent = '';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ username
function normalizeUsername(username) {
    return username.startsWith('@') ? username : `@${username}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
function createSocketConnection() {
    console.log('üîå –°–æ–∑–¥–∞–µ–º socket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');

    // –ï—Å–ª–∏ socket —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
    if (socket) {
        socket.removeAllListeners();
        socket.disconnect();
    }

    socket = io({
        transports: ['websocket', 'polling'],
        upgrade: true,
        rememberUpgrade: true,
        timeout: 10000,
        forceNew: true, // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        reconnection: true,
        reconnectionDelay: 1000,
        reconnectionDelayMax: 5000,
        maxReconnectionAttempts: Infinity
    });

    setupSocketHandlers();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ socket
function setupSocketHandlers() {
    socket.on('connect', () => {
        console.log('‚úÖ Socket –ø–æ–¥–∫–ª—é—á–µ–Ω:', socket.id);
        isConnected = true;
        isReconnecting = false;
        reconnectAttempts = 0;

        // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if (reconnectInterval) {
            clearTimeout(reconnectInterval);
            reconnectInterval = null;
        }

        if (currentUser) {
            console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');

            // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä —á—Ç–æ –º—ã –æ–Ω–ª–∞–π–Ω
            socket.emit('user-online', currentUser.username);

            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Ç—ã
            loadUserChats().then(() => {
                console.log('‚úÖ –ß–∞—Ç—ã –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã');

                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å—Ç–∞—Ç—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                setTimeout(() => {
                    subscribeToUserStatuses();
                    updateAllUserStatuses();
                }, 1000);

                // –ï—Å–ª–∏ –±—ã–ª –æ—Ç–∫—Ä—ã—Ç —á–∞—Ç, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –Ω–µ–º—É
                if (currentChatId) {
                    console.log('üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —á–∞—Ç—É:', currentChatId);
                    socket.emit('join-chat', currentChatId);

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
                    if (currentChat) {
                        updateChatUserStatus(currentChat);
                    }
                }
            });

            startPing();
            startStatusUpdates();
        }

        hideConnectionError();
        showConnectionSuccess('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    });

    socket.on('disconnect', (reason) => {
        console.log('üî¥ Socket –æ—Ç–∫–ª—é—á–µ–Ω:', reason);
        isConnected = false;
        stopPing();
        stopStatusUpdates();

        if (reason === 'io server disconnect') {
            // –°–µ—Ä–≤–µ—Ä –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∏–ª –Ω–∞—Å
            showConnectionError('–°–µ—Ä–≤–µ—Ä —Ä–∞–∑–æ—Ä–≤–∞–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
            attemptReconnect();
        } else if (reason === 'transport close' || reason === 'transport error') {
            // –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é
            showConnectionError('–ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
            attemptReconnect();
        } else {
            // –î—Ä—É–≥–∏–µ –ø—Ä–∏—á–∏–Ω—ã
            showConnectionError('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
            attemptReconnect();
        }
    });

    socket.on('connect_error', (error) => {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
        isConnected = false;

        if (!isReconnecting) {
            showConnectionError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
            attemptReconnect();
        }
    });

    socket.on('reconnect_attempt', (attemptNumber) => {
        console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${attemptNumber}`);
        showConnectionError(`–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ... (–ø–æ–ø—ã—Ç–∫–∞ ${attemptNumber})`);
    });

    socket.on('reconnect', (attemptNumber) => {
        console.log(`‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–æ—Å–ª–µ ${attemptNumber} –ø–æ–ø—ã—Ç–æ–∫`);
        isReconnecting = false;
    });

    socket.on('reconnect_failed', () => {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è');
        showConnectionError('–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É');

        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        setTimeout(() => {
            if (!isConnected && currentUser) {
                attemptReconnect();
            }
        }, 5000);
    });

    socket.on('connection-confirmed', (data) => {
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ:', data);
        if (data.connectionType === 'reconnected') {
            console.log('üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');

            // –ü–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            restoreApplicationState();
        }
    });

    socket.on('user-status-changed', (data) => {
        console.log('üì° –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞:', data);
        updateUserStatus(data.username, data.isOnline, data.lastSeenText);
    });

    socket.on('users-status-update', (data) => {
        console.log('üì° –ü–æ–ª—É—á–µ–Ω–æ –º–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤:', data);
        if (data.users && Array.isArray(data.users)) {
            data.users.forEach(user => {
                updateUserStatus(user.username, user.isOnline, user.lastSeenText);
            });
        }
    });

    socket.on('new-message', (messageData) => {
        if (currentChatId && isMessageForCurrentChat(messageData)) {
            displayMessage(messageData);
        }
        updateChatsList();
    });

    socket.on('new-chat-notification', (data) => {
        const { from, chatId, message } = data;

        if (!activeChats.has(chatId)) {
            const newChat = {
                username: from,
                chatId: chatId,
                lastMessage: {
                    text: message.message,
                    timestamp: message.timestamp,
                    from: message.from
                },
                isOnline: true,
                lastSeenText: '–í —Å–µ—Ç–∏'
            };
            activeChats.set(chatId, newChat);

            updateChatUserInfo(from, chatId);
            displayChatsList();
            subscribeToUserStatus(from);
        }
    });

    socket.on('chat-history', (messages) => {
        chatMessages.innerHTML = '';
        messages.forEach(message => displayMessage(message));
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    socket.on('user-profile-updated', (data) => {
        const { username, profile } = data;
        console.log('üìù –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è:', { username, profile });

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ —á–∞—Ç–∞—Ö
        updateUserProfileInChats(username, profile);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∏
    socket.on('user-avatar-updated', (data) => {
        const { username, avatar } = data;
        console.log('üñºÔ∏è –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∫–∏:', { username, avatar });

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –≤ —á–∞—Ç–∞—Ö
        updateUserAvatarInChats(username, avatar);
    });

    socket.on('pong', () => {
        lastActivity = Date.now();
    });

    socket.on('error', (error) => {
        console.error('‚ùå Socket error:', error);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–∞—Ö
function updateUserAvatarInChats(username, avatar) {
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–∞—Ö:', { username, avatar });

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤ activeChats
    for (const [chatId, chat] of activeChats) {
        if (chat.username === username) {
            chat.avatar = avatar;
            activeChats.set(chatId, chat);
            break;
        }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
    displayChatsList();

    // –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π —á–∞—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
    if (currentChat === username) {
        updateChatAvatar(username, avatar);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
function attemptReconnect() {
    if (isReconnecting || !currentUser) return;

    isReconnecting = true;
    reconnectAttempts++;

    console.log(`üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (–ø–æ–ø—ã—Ç–∫–∞ ${reconnectAttempts})`);

    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
    if (reconnectInterval) {
        clearTimeout(reconnectInterval);
    }

    // –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º
    const delay = Math.min(1000 * Math.pow(1.5, reconnectAttempts - 1), 10000);

    reconnectInterval = setTimeout(() => {
        if (!isConnected && currentUser) {
            console.log(`üîå –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${reconnectAttempts}/${maxReconnectAttempts}`);

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            createSocketConnection();

            // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º—É–º–∞ –ø–æ–ø—ã—Ç–æ–∫, –∂–¥–µ–º –¥–æ–ª—å—à–µ
            if (reconnectAttempts >= maxReconnectAttempts) {
                reconnectAttempts = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                console.log('üîÑ –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
            }
        }
        isReconnecting = false;
    }, delay);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function restoreApplicationState() {
    if (!currentUser) return;

    console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');

    try {
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Ç—ã
        await loadUserChats();

        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å—Ç–∞—Ç—É—Å—ã
        setTimeout(() => {
            subscribeToUserStatuses();
            updateAllUserStatuses();
        }, 1000);

        // –ï—Å–ª–∏ –±—ã–ª –æ—Ç–∫—Ä—ã—Ç —á–∞—Ç, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
        if (currentChatId && currentChat) {
            console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Ç:', currentChatId);
            socket.emit('join-chat', currentChatId);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
            updateChatUserStatus(currentChat);
        }

        console.log('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –≤ —á–∞—Ç–µ
async function updateChatUserStatus(username) {
    if (!username) return;

    try {
        const response = await fetch(`/profile/${username}`);
        const data = await response.json();

        if (data.success && currentChat === username) {
            const statusText = data.profile.lastSeenText;
            const displayName = data.profile.displayName || username;
            const avatar = data.profile.avatar;

            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É
            updateChatAvatar(username, avatar);

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –∞–≤–∞—Ç–∞—Ä–∫–µ
            updateChatAvatarStatus(data.profile.isOnline);

            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            chatTitle.innerHTML = `
                <div>${displayName}</div>
                <div style="font-size: 12px; color: #95A5A6; font-weight: 400; margin-top: 2px;">${statusText}</div>
            `;

            updateUserStatus(username, data.profile.isOnline, statusText);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –∞–≤–∞—Ç–∞—Ä–∫–µ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ —á–∞—Ç–∞
function updateChatAvatarStatus(isOnline) {
    let statusIndicator = chatAvatarContainer.querySelector('.chat-avatar-status');

    if (!statusIndicator) {
        statusIndicator = document.createElement('div');
        statusIndicator.className = 'chat-avatar-status';
        chatAvatarContainer.appendChild(statusIndicator);
    }

    statusIndicator.className = `chat-avatar-status ${isOnline ? 'online' : ''}`;
}

function subscribeToUserStatuses() {
    if (!socket || !isConnected || activeChats.size === 0) return;

    const usernames = Array.from(activeChats.values()).map(chat => chat.username);
    console.log('üì° –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å—Ç–∞—Ç—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usernames);

    socket.emit('subscribe-to-statuses', usernames);
}

function subscribeToUserStatus(username) {
    if (!socket || !isConnected) return;

    console.log('üì° –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', username);
    socket.emit('subscribe-to-status', username);
}

function startPing() {
    if (pingInterval) {
        clearInterval(pingInterval);
    }

    pingInterval = setInterval(() => {
        if (socket && isConnected) {
            socket.emit('ping');
            lastActivity = Date.now();
        }
    }, 25000);
}

function stopPing() {
    if (pingInterval) {
        clearInterval(pingInterval);
        pingInterval = null;
    }
}

function startStatusUpdates() {
    if (statusUpdateInterval) {
        clearInterval(statusUpdateInterval);
    }

    statusUpdateInterval = setInterval(() => {
        if (isConnected && activeChats.size > 0) {
            updateAllUserStatuses();
        }
    }, 15000);
}

function stopStatusUpdates() {
    if (statusUpdateInterval) {
        clearInterval(statusUpdateInterval);
        statusUpdateInterval = null;
    }
}

async function updateAllUserStatuses() {
    const usernames = Array.from(activeChats.values()).map(chat => chat.username);

    if (usernames.length === 0) return;

    try {
        const response = await fetch('/users-status', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ usernames })
        });

        const data = await response.json();

        if (data.success) {
            console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞:', data.users);
            data.users.forEach(user => {
                updateUserStatus(user.username, user.isOnline, user.lastSeenText);
            });
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤:', error);
    }
}

function showConnectionError(message) {
    let indicator = document.getElementById('connectionIndicator');
    if (!indicator) {
        indicator = document.createElement('div');
        indicator.id = 'connectionIndicator';
        indicator.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            background: #E74C3C;
            color: white;
            text-align: center;
            padding: 8px;
            font-size: 14px;
            z-index: 10000;
            transition: all 0.3s ease;
        `;
        document.body.appendChild(indicator);
    }
    indicator.textContent = message;
    indicator.style.display = 'block';
    indicator.style.backgroundColor = '#E74C3C';
}

function showConnectionSuccess(message) {
    let indicator = document.getElementById('connectionIndicator');
    if (!indicator) {
        indicator = document.createElement('div');
        indicator.id = 'connectionIndicator';
        indicator.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            color: white;
            text-align: center;
            padding: 8px;
            font-size: 14px;
            z-index: 10000;
            transition: all 0.3s ease;
        `;
        document.body.appendChild(indicator);
    }
    indicator.textContent = message;
    indicator.style.display = 'block';
    indicator.style.backgroundColor = '#27AE60';

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        hideConnectionError();
    }, 3000);
}

function hideConnectionError() {
    const indicator = document.getElementById('connectionIndicator');
    if (indicator) {
        indicator.style.display = 'none';
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –≤—Ö–æ–¥–æ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
switchBtn.addEventListener('click', () => {
    isLoginMode = !isLoginMode;
    if (isLoginMode) {
        authTitle.textContent = '–í—Ö–æ–¥';
        authBtn.textContent = '–í–æ–π—Ç–∏';
        switchBtn.textContent = '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è';
        displayNameInput.style.display = 'none';
        displayNameInput.required = false;
    } else {
        authTitle.textContent = '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è';
        authBtn.textContent = '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è';
        switchBtn.textContent = '–í—Ö–æ–¥';
        displayNameInput.style.display = 'block';
        displayNameInput.required = true;
    }
    hideError();
});

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
authBtn.addEventListener('click', async () => {
    const username = usernameInput.value.trim();
    const password = passwordInput.value.trim();
    const displayName = displayNameInput.value.trim();

    if (!username || !password) {
        showError('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
        return;
    }

    if (!isLoginMode && !displayName) {
        showError('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
        return;
    }

    const endpoint = isLoginMode ? '/login' : '/register';
    const body = isLoginMode ? 
        { username, password } : 
        { username, password, displayName };

    try {
        const response = await fetch(endpoint, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(body)
        });

        const data = await response.json();

        if (data.success) {
            if (isLoginMode) {
                currentUser = data.user;
                console.log('‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω:', currentUser.username);
                initializeApp();
            } else {
                try {
                    const loginResponse = await fetch('/login', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ username, password })
                    });

                    const loginData = await loginResponse.json();

                    if (loginData.success) {
                        currentUser = loginData.user;
                        console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –≤—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã:', currentUser.username);
                        initializeApp();
                    } else {
                        showError('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –≤—Ä—É—á–Ω—É—é.');
                    }
                } catch (loginError) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', loginError);
                    showError('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –≤—Ä—É—á–Ω—É—é.');
                }
            }
        } else {
            showError(data.message);
        }
    } catch (error) {
        showError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
function initializeApp() {
    authScreen.style.display = 'none';
    mainApp.style.display = 'block';
    currentUserSpan.textContent = currentUser.displayName;

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    reconnectAttempts = 0;
    isReconnecting = false;

    createSocketConnection();
    loadUserChats();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function loadUserChats() {
    try {
        const response = await fetch(`/user-chats/${currentUser.username}`);
        const data = await response.json();

        if (data.success) {
            activeChats.clear();
            data.chats.forEach(chat => {
                activeChats.set(chat.chatId, chat);
            });
            displayChatsList();

            setTimeout(() => {
                subscribeToUserStatuses();
                updateAllUserStatuses();
            }, 500);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤:', error);
    }
}

async function updateChatsList() {
    await loadUserChats();
}

async function updateChatUserInfo(username, chatId) {
    try {
        const response = await fetch(`/profile/${username}`);
        const data = await response.json();

        if (data.success && activeChats.has(chatId)) {
            const chat = activeChats.get(chatId);
            chat.displayName = data.profile.displayName;
            chat.description = data.profile.description;
            chat.avatar = data.profile.avatar;
            chat.isOnline = data.profile.isOnline;
            chat.lastSeenText = data.profile.lastSeenText;
            activeChats.set(chatId, chat);
            displayChatsList();
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–∞—Ö
function updateUserProfileInChats(username, profile) {
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–∞—Ö:', { username, profile });

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –≤ activeChats
    for (const [chatId, chat] of activeChats) {
        if (chat.username === username) {
            chat.displayName = profile.displayName;
            chat.description = profile.description;
            chat.avatar = profile.avatar;
            activeChats.set(chatId, chat);

            // –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π —á–∞—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            if (currentChat === username) {
                const statusText = chat.lastSeenText || (chat.isOnline ? '–í —Å–µ—Ç–∏' : '–ë—ã–ª(–∞) –≤ —Å–µ—Ç–∏ –¥–∞–≤–Ω–æ');
                updateChatAvatar(username, profile.avatar);
                updateChatAvatarStatus(chat.isOnline);
                chatTitle.innerHTML = `
                    <div>${profile.displayName}</div>
                    <div style="font-size: 12px; color: #95A5A6; font-weight: 400; margin-top: 2px;">${statusText}</div>
                `;
            }

            break;
        }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
    displayChatsList();
}

function displayChatsList() {
    const chatsContainer = document.createElement('div');
    chatsContainer.innerHTML = '';

    const sortedChats = Array.from(activeChats.values()).sort((a, b) => {
        if (!a.lastMessage && !b.lastMessage) return 0;
        if (!a.lastMessage) return 1;
        if (!b.lastMessage) return -1;
        return new Date(b.lastMessage.timestamp) - new Date(a.lastMessage.timestamp);
    });

    sortedChats.forEach(chat => {
        const chatItem = document.createElement('div');
        chatItem.className = 'chat-item';

        if (currentChatId === chat.chatId) {
            chatItem.classList.add('active');
        }

        const displayName = chat.displayName || chat.username;
        const lastMessageText = chat.lastMessage ? 
            `<div class="last-message">
                ${chat.lastMessage.from === currentUser.username ? '–í—ã: ' : ''}${chat.lastMessage.text}
            </div>` : '';

        const avatarHtml = getUserAvatar(chat.username, chat.avatar);

        chatItem.innerHTML = `
            <div class="chat-item-avatar-container">
                ${avatarHtml}
                <div class="avatar-status-indicator ${chat.isOnline ? 'online' : ''}"></div>
            </div>
            <div class="chat-info">
                <div class="chat-name">
                    <strong>${displayName}</strong>
                    <span class="username">@${chat.username}</span>
                </div>
                ${lastMessageText}
            </div>
        `;

        chatItem.addEventListener('click', () => {
            openChatById(chat.chatId, chat.username, displayName);
        });

        chatsContainer.appendChild(chatItem);
    });

    const existingChats = chatsList.querySelectorAll('.chat-item');
    existingChats.forEach(item => item.remove());

    Array.from(chatsContainer.children).forEach(child => {
        chatsList.appendChild(child);
    });
}

function isMessageForCurrentChat(messageData) {
    if (!currentChat || !currentChatId) return false;

    const expectedChatId = getChatId(currentUser.username, currentChat);
    return currentChatId === expectedChatId && 
           (messageData.from === currentChat || messageData.from === currentUser.username);
}

let searchTimeout;
userSearch.addEventListener('input', () => {
    clearTimeout(searchTimeout);
    const query = userSearch.value.trim();

    if (query.length === 0) {
        displayChatsList();
        return;
    }

    searchTimeout = setTimeout(async () => {
        try {
            const response = await fetch('/search-users', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ query })
            });

            const users = await response.json();
            displaySearchResults(users);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
        }
    }, 300);
});

function displaySearchResults(users) {
    chatsList.innerHTML = '';

    users.forEach(user => {
        if (user.username === currentUser.username) return;

        const chatItem = document.createElement('div');
        chatItem.className = 'chat-item';

        const avatarHtml = getUserAvatar(user.username, user.avatar);

        chatItem.innerHTML = `
            <div class="chat-item-avatar-container">
                ${avatarHtml}
                <div class="avatar-status-indicator ${user.isOnline ? 'online' : ''}"></div>
            </div>
            <div class="chat-info">
                <div class="chat-name">
                    <strong>${user.displayName}</strong>
                    <span class="username">@${user.username}</span>
                </div>
            </div>
        `;

        chatItem.addEventListener('click', () => {
            openChat(user.username, user.displayName);
        });

        chatsList.appendChild(chatItem);
    });
}

function openChat(username, displayName) {
    const chatId = getChatId(currentUser.username, username);
    openChatById(chatId, username, displayName);
}

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞ —Å —Ñ–∏–∫—Å–æ–º —Ñ–æ–∫—É—Å–∞ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
function openChatById(chatId, username, displayName) {
    currentChat = username;
    currentChatId = chatId;

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç–∫—Ä—ã—Ç—ã
    hideSettings();

    userSearch.value = '';

    document.querySelectorAll('.chat-item').forEach(item => {
        item.classList.remove('active');
    });

    const chatItems = document.querySelectorAll('.chat-item');
    chatItems.forEach(item => {
        const usernameElement = item.querySelector('.username');
        if (usernameElement && usernameElement.textContent === `@${username}`) {
            item.classList.add('active');
        }
    });

    let statusText = '–ó–∞–≥—Ä—É–∑–∫–∞...';
    let isOnline = false;
    let avatar = null;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    for (const [cId, chat] of activeChats) {
        if (chat.username === username) {
            statusText = chat.lastSeenText || (chat.isOnline ? '–í —Å–µ—Ç–∏' : '–ë—ã–ª(–∞) –≤ —Å–µ—Ç–∏ –¥–∞–≤–Ω–æ');
            isOnline = chat.isOnline;
            avatar = chat.avatar;
            break;
        }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    updateChatAvatar(username, avatar);
    updateChatAvatarStatus(isOnline);
    chatTitle.innerHTML = `
        <div>${displayName || username}</div>
        <div style="font-size: 12px; color: #95A5A6; font-weight: 400; margin-top: 2px;">${statusText}</div>
    `;

    // –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
    fetch(`/profile/${username}`)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const newStatusText = data.profile.lastSeenText;
                const newIsOnline = data.profile.isOnline;
                const newAvatar = data.profile.avatar;

                updateChatAvatar(username, newAvatar);
                updateChatAvatarStatus(newIsOnline);
                chatTitle.innerHTML = `
                    <div>${displayName || username}</div>
                    <div style="font-size: 12px; color: #95A5A6; font-weight: 400; margin-top: 2px;">${newStatusText}</div>
                `;

                updateUserStatus(username, newIsOnline, newStatusText);
                subscribeToUserStatus(username);
            }
        })
        .catch(error => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        });

    chatHeader.style.display = 'flex';
    chatInput.style.display = 'flex';

    if (isMobile) {
        chatArea.classList.add('active');

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ –° –§–û–ö–£–°–û–ú –ù–ê –ú–û–ë–ò–õ–¨–ù–´–•
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∏ –∑–∞—Ç–µ–º —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ input
        setTimeout(() => {
            if (messageInput) {
                messageInput.focus();

                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Ñ–æ–∫—É—Å–∞ —á–µ—Ä–µ–∑ –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                setTimeout(() => {
                    messageInput.focus();
                }, 100);
            }
        }, 450); // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ (400ms)
    }

    chatMessages.innerHTML = '<div class="no-chat">–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...</div>';

    if (socket && isConnected) {
        socket.emit('join-chat', chatId);
    }

    displayChatsList();
}

function getChatId(user1, user2) {
    return [user1, user2].sort().join('_');
}

sendBtn.addEventListener('click', sendMessage);
messageInput.addEventListener('keydown', (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        sendMessage();
    }
});

function sendMessage() {
    console.log('üì§ sendMessage –≤—ã–∑–≤–∞–Ω–∞');
    const message = messageInput.value.trim();

    if (!message || !currentChat || !currentChatId) {
        console.log('‚ö†Ô∏è –£—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ - –≤—ã—Ö–æ–¥–∏–º');
        return;
    }

    if (!socket || !isConnected) {
        console.log('‚ö†Ô∏è Socket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω!');
        showConnectionError('–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
        return;
    }

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ socket');
    socket.emit('send-message', {
        chatId: currentChatId,
        message,
        from: currentUser.username,
        to: currentChat
    });

    messageInput.value = '';
    lastActivity = Date.now();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function formatLocalTime(timestamp) {
    const date = new Date(timestamp);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–µ–≥–æ–¥–Ω—è –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const now = new Date();
    const isToday = date.toDateString() === now.toDateString();

    if (isToday) {
        // –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –≤ 24-—á–∞—Å–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        return date.toLocaleTimeString([], {
            hour: '2-digit',
            minute: '2-digit',
            hour12: false
        });
    } else {
        // –ï—Å–ª–∏ –Ω–µ —Å–µ–≥–æ–¥–Ω—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        const yesterday = new Date(now);
        yesterday.setDate(yesterday.getDate() - 1);

        if (date.toDateString() === yesterday.toDateString()) {
            // –ï—Å–ª–∏ –≤—á–µ—Ä–∞
            return '–≤—á–µ—Ä–∞ ' + date.toLocaleTimeString([], {
                hour: '2-digit',
                minute: '2-digit',
                hour12: false
            });
        } else {
            // –ï—Å–ª–∏ —Ä–∞–Ω—å—à–µ
            return date.toLocaleDateString([], {
                day: '2-digit',
                month: '2-digit'
            }) + ' ' + date.toLocaleTimeString([], {
                hour: '2-digit',
                minute: '2-digit',
                hour12: false
            });
        }
    }
}

function displayMessage(messageData) {
    const noChat = chatMessages.querySelector('.no-chat');
    if (noChat) {
        noChat.remove();
    }

    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${messageData.from === currentUser.username ? 'own' : ''}`;

    const formattedTime = formatLocalTime(messageData.timestamp);

    messageDiv.innerHTML = `
        <div class="message-content">
            <div class="message-text">${messageData.message}</div>
            <div class="message-info">${formattedTime}</div>
        </div>
    `;

    chatMessages.appendChild(messageDiv);

    const clearDiv = document.createElement('div');
    clearDiv.style.clear = 'both';
    clearDiv.style.height = '0';
    chatMessages.appendChild(clearDiv);

    chatMessages.scrollTop = chatMessages.scrollHeight;
}

backBtn.addEventListener('click', () => {
    if (isMobile) {
        chatArea.classList.remove('active');
        currentChat = null;
        currentChatId = null;
        chatHeader.style.display = 'none';
        chatInput.style.display = 'none';

        document.querySelectorAll('.chat-item').forEach(item => {
            item.classList.remove('active');
        });

        chatMessages.innerHTML = '<div class="no-chat">–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è</div>';
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
settingsBtn.addEventListener('click', () => {
    console.log('‚öôÔ∏è –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
    showSettings();
});

settingsBackBtn.addEventListener('click', () => {
    console.log('‚öôÔ∏è –ó–∞–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
    hideSettings();
});

function showSettings() {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫—Ä—ã—Ç –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º
    if (isMobile) {
        chatArea.classList.remove('active');
        settingsArea.classList.add('active');
    } else {
        // –ù–∞ –¥–µ—Å–∫—Ç–æ–ø–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–º–µ—Å—Ç–æ —á–∞—Ç–∞
        chatArea.style.display = 'none';
        settingsArea.style.display = 'flex';
        settingsArea.classList.add('active');
    }
}

function hideSettings() {
    if (isMobile) {
        settingsArea.classList.remove('active');
    } else {
        // –ù–∞ –¥–µ—Å–∫—Ç–æ–ø–µ —Å–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Ç
        settingsArea.style.display = 'none';
        settingsArea.classList.remove('active');
        chatArea.style.display = 'flex';
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –Ω–∞—Å—Ç—Ä–æ–µ–∫
document.addEventListener('click', (e) => {
    const category = e.target.closest('.settings-category');
    if (category) {
        const categoryType = category.getAttribute('data-category');

        if (categoryType === 'profile') {
            showProfileSettings();
        } else if (categoryType === 'password') {
            showPasswordChangeModal();
        } else {
            console.log('üöß –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', categoryType);
        }
    }
});

// –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
logoutBtn.addEventListener('click', async () => {
    console.log('üö™ –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞');

    try {
        await fetch('/logout', {
            method: 'POST'
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', error);
    }

    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    currentUser = null;
    currentChat = null;
    currentChatId = null;
    activeChats.clear();

    // –û—Ç–∫–ª—é—á–∞–µ–º socket
    if (socket) {
        socket.removeAllListeners();
        socket.disconnect();
        socket = null;
    }

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    stopPing();
    stopStatusUpdates();

    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä—ã –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if (reconnectInterval) {
        clearTimeout(reconnectInterval);
        reconnectInterval = null;
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    isConnected = false;
    isReconnecting = false;
    reconnectAttempts = 0;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    mainApp.style.display = 'none';
    authScreen.style.display = 'flex';
    hideSettings();
    hideConnectionError();

    // –û—á–∏—â–∞–µ–º –ø–æ–ª—è
    usernameInput.value = '';
    passwordInput.value = '';
    displayNameInput.value = '';
    hideError();
});

profileBtn.addEventListener('click', () => {
    showProfile(currentUser.username);
});

chatProfileBtn.addEventListener('click', () => {
    if (currentChat) {
        showProfile(currentChat);
    }
});

async function showProfile(username) {
    try {
        const response = await fetch(`/profile/${username}`);
        const data = await response.json();

        if (data.success) {
            const profile = data.profile;
            const registeredDate = new Date(profile.registeredAt).toLocaleDateString();

            const avatarHtml = getProfileAvatar(profile.username, profile.avatar);

            profileInfo.innerHTML = `
                <div class="profile-header">
                    <div class="profile-avatar-container">
                        ${avatarHtml}
                        <div class="profile-avatar-status ${profile.isOnline ? 'online' : ''}"></div>
                    </div>
                    <div class="profile-details">
                        <div class="profile-name-container">
                            <div class="profile-name">${profile.displayName}</div>
                            <div class="profile-username">@${profile.username}</div>
                        </div>
                        <div class="profile-description">${profile.description || ''}</div>
                    </div>
                </div>
                <div class="profile-meta">
                    <div class="profile-registered">–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${registeredDate}</div>
                </div>
            `;

            profileModal.style.display = 'flex';
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
    }
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ File API –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
function checkFileAPISupport() {
    if (!window.File || !window.FileReader || !window.FileList || !window.Blob) {
        console.warn('‚ö†Ô∏è File API –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ');
        return false;
    }
    return true;
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Ñ–∏–ª—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
async function showProfileSettings() {
    console.log('üë§ –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è');

    profileSettingsDisplayName.value = currentUser.displayName;
    profileSettingsDescription.value = currentUser.description || '';

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–≤—å—é –∞–≤–∞—Ç–∞—Ä–∫–∏
    if (currentUser.avatar) {
        avatarPreview.src = currentUser.avatar;
        avatarPreview.classList.remove('default');
    } else {
        avatarPreview.src = '';
        avatarPreview.classList.add('default');
        avatarPreview.innerHTML = currentUser.username.charAt(0).toUpperCase();
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É File API
    if (!checkFileAPISupport()) {
        console.warn('‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ');
    }

    hideError(profileSettingsError);
    profileSettingsModal.style.display = 'flex';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
function showPasswordChangeModal() {
    console.log('üîê –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è');

    // –û—á–∏—â–∞–µ–º –ø–æ–ª—è
    currentPassword.value = '';
    newPassword.value = '';
    confirmPassword.value = '';

    hideError(passwordChangeError);
    passwordChangeModal.style.display = 'flex';
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
changePasswordBtn.addEventListener('click', async () => {
    const current = currentPassword.value.trim();
    const newPass = newPassword.value.trim();
    const confirm = confirmPassword.value.trim();

    if (!current || !newPass || !confirm) {
        showError('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', passwordChangeError);
        return;
    }

    if (newPass !== confirm) {
        showError('–ù–æ–≤—ã–µ –ø–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç', passwordChangeError);
        return;
    }

    if (newPass.length < 6) {
        showError('–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤', passwordChangeError);
        return;
    }

    try {
        const response = await fetch('/change-password', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                currentPassword: current,
                newPassword: newPass
            })
        });

        const data = await response.json();

        if (data.success) {
            showSuccess('–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!', passwordChangeError);
            setTimeout(() => {
                passwordChangeModal.style.display = 'none';
            }, 2000);
        } else {
            showError(data.message, passwordChangeError);
        }
    } catch (error) {
        showError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', passwordChangeError);
    }
});

saveProfileSettingsBtn.addEventListener('click', async () => {
    const displayName = profileSettingsDisplayName.value.trim();
    const description = profileSettingsDescription.value.trim();

    if (!displayName) {
        showError('–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ', profileSettingsError);
        return;
    }

    try {
        const response = await fetch('/update-profile', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                displayName,
                description
            })
        });

        const data = await response.json();

        if (data.success) {
            currentUser = data.user;
            currentUserSpan.textContent = currentUser.displayName;

            profileSettingsModal.style.display = 'none';
            hideError(profileSettingsError);

            console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω:', currentUser);

            // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
            if (socket && isConnected) {
                socket.emit('profile-updated', {
                    username: currentUser.username,
                    profile: currentUser
                });
            }
        } else {
            showError(data.message, profileSettingsError);
        }
    } catch (error) {
        showError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', profileSettingsError);
    }
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
closeModal.addEventListener('click', () => {
    profileModal.style.display = 'none';
});

closeProfileSettingsModal.addEventListener('click', () => {
    profileSettingsModal.style.display = 'none';
});

closePasswordChangeModal.addEventListener('click', () => {
    passwordChangeModal.style.display = 'none';
});

profileModal.addEventListener('click', (e) => {
    if (e.target === profileModal) {
        profileModal.style.display = 'none';
    }
});

profileSettingsModal.addEventListener('click', (e) => {
    if (e.target === profileSettingsModal) {
        profileSettingsModal.style.display = 'none';
    }
});

passwordChangeModal.addEventListener('click', (e) => {
    if (e.target === passwordChangeModal) {
        passwordChangeModal.style.display = 'none';
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter –≤ –ø–æ–ª—è—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
usernameInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
        if (isLoginMode) {
            passwordInput.focus();
        } else {
            displayNameInput.focus();
        }
    }
});

displayNameInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
        passwordInput.focus();
    }
});

passwordInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
        authBtn.click();
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter –≤ –ø–æ–ª—è—Ö —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
currentPassword.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
        newPassword.focus();
    }
});

newPassword.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
        confirmPassword.focus();
    }
});

confirmPassword.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
        changePasswordBtn.click();
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤–∞–π–ø–æ–≤ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
let startX = 0;
let startY = 0;
let isSwipeActive = false;

chatArea.addEventListener('touchstart', (e) => {
    if (!isMobile) return;

    startX = e.touches[0].clientX;
    startY = e.touches[0].clientY;
    isSwipeActive = true;
});

chatArea.addEventListener('touchmove', (e) => {
    if (!isMobile || !isSwipeActive) return;

    const currentX = e.touches[0].clientX;
    const currentY = e.touches[0].clientY;
    const diffX = currentX - startX;
    const diffY = currentY - startY;

    if (Math.abs(diffX) > Math.abs(diffY) && Math.abs(diffX) > 50) {
        if (diffX > 0 && chatArea.classList.contains('active')) {
            backBtn.click();
        }
    }
});

chatArea.addEventListener('touchend', () => {
    isSwipeActive = false;
});

// –¢–æ –∂–µ —Å–∞–º–æ–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
settingsArea.addEventListener('touchstart', (e) => {
    if (!isMobile) return;

    startX = e.touches[0].clientX;
    startY = e.touches[0].clientY;
    isSwipeActive = true;
});

settingsArea.addEventListener('touchmove', (e) => {
    if (!isMobile || !isSwipeActive) return;

    const currentX = e.touches[0].clientX;
    const currentY = e.touches[0].clientY;
    const diffX = currentX - startX;
    const diffY = currentY - startY;

    if (Math.abs(diffX) > Math.abs(diffY) && Math.abs(diffX) > 50) {
        if (diffX > 0 && settingsArea.classList.contains('active')) {
            settingsBackBtn.click();
        }
    }
});

settingsArea.addEventListener('touchend', () => {
    isSwipeActive = false;
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ–∫—É—Å–∞ –Ω–∞ input –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
messageInput.addEventListener('focus', () => {
    if (isMobile) {
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ª—É—á—à–µ–π —Ä–∞–±–æ—Ç—ã –Ω–∞ iOS
        setTimeout(() => {
            messageInput.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }, 300);
    }
});

messageInput.addEventListener('blur', () => {
    if (isMobile) {
        setTimeout(() => {
            window.scrollTo(0, 0);
        }, 100);
    }
});

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
messageInput.addEventListener('touchstart', (e) => {
    if (isMobile) {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ input –ø—Ä–∏ –∫–∞—Å–∞–Ω–∏–∏
        setTimeout(() => {
            messageInput.focus();
        }, 50);
    }
});

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã textarea –ø—Ä–∏ –≤–≤–æ–¥–µ
messageInput.addEventListener('input', (e) => {
    e.target.style.height = 'auto';
    e.target.style.height = Math.min(e.target.scrollHeight, 120) + 'px';
});

// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∑—É–º–∞ –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –Ω–∞ input –Ω–∞ iOS
if (/iPad|iPhone|iPod/.test(navigator.userAgent)) {
    const inputs = document.querySelectorAll('input');
    inputs.forEach(input => {
        input.addEventListener('focus', () => {
            input.style.fontSize = '16px';
        });
        input.addEventListener('blur', () => {
            input.style.fontSize = '';
        });
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ orientation change –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
window.addEventListener('orientationchange', () => {
    setTimeout(() => {
        isMobile = window.innerWidth < 768;

        if (chatMessages.children.length > 0) {
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        // –ü–æ–≤—Ç–æ—Ä–Ω–æ —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ input –µ—Å–ª–∏ —á–∞—Ç –æ—Ç–∫—Ä—ã—Ç
        if (isMobile && currentChat && chatArea.classList.contains('active')) {
            setTimeout(() => {
                messageInput.focus();
            }, 500);
        }
    }, 100);
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PWA –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
        navigator.serviceWorker.register('/sw.js')
            .then(registration => {
                console.log('‚úÖ SW registered: ', registration);
            })
            .catch(registrationError => {
                console.log('‚ùå SW registration failed: ', registrationError);
            });
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('visibilitychange', () => {
    if (currentUser && socket) {
        if (document.hidden) {
            console.log('üëÅÔ∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∫—Ä—ã—Ç–∞');
            // –ù–ï –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã  
            if (isConnected) {
                socket.emit('user-inactive');
            }
        } else {
            console.log('üëÅÔ∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–∏–¥–∏–º–∞');
            lastActivity = Date.now();

            if (isConnected) {
                socket.emit('user-active');
            } else if (!isReconnecting) {
                // –ï—Å–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∏ –Ω–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                attemptReconnect();
            }
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ–∫—É—Å–∞/—Ä–∞—Å—Ñ–æ–∫—É—Å–∞ –æ–∫–Ω–∞
window.addEventListener('focus', () => {
    if (currentUser) {
        if (!isConnected && !isReconnecting) {
            console.log('üîÑ –û–∫–Ω–æ –ø–æ–ª—É—á–∏–ª–æ —Ñ–æ–∫—É—Å, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...');
            attemptReconnect();
        }

        if (isConnected) {
            lastActivity = Date.now();
            socket.emit('user-active');
        }
    }
});

window.addEventListener('blur', () => {
    // –ù–ï –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞ –æ–∫–Ω–∞
    console.log('üëÅÔ∏è –û–∫–Ω–æ –ø–æ—Ç–µ—Ä—è–ª–æ —Ñ–æ–∫—É—Å');
});

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const activityEvents = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click'];
let lastActivityPing = 0;

activityEvents.forEach(event => {
    document.addEventListener(event, () => {
        if (socket && isConnected && currentUser) {
            const now = Date.now();
            lastActivity = now;

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ 10 —Å–µ–∫—É–Ω–¥
            if (now - lastActivityPing > 10000) {
                socket.emit('user-active');
                lastActivityPing = now;
            }
        }
    }, { passive: true });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', () => {
    stopPing();
    stopStatusUpdates();

    if (reconnectInterval) {
        clearTimeout(reconnectInterval);
    }

    if (socket && isConnected && currentUser) {
        socket.emit('user-offline');
        socket.disconnect();
    }
});

function updateUserStatus(username, isOnline, lastSeenText) {
    console.log(`üìä –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è ${username}: ${isOnline ? '–æ–Ω–ª–∞–π–Ω' : '–æ—Ñ—Ñ–ª–∞–π–Ω'}, ${lastSeenText}`);

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–∫–µ —á–∞—Ç–æ–≤
    for (const [chatId, chat] of activeChats) {
        if (chat.username === username) {
            const oldStatus = chat.isOnline;
            chat.isOnline = isOnline;
            chat.lastSeenText = lastSeenText;
            activeChats.set(chatId, chat);

            if (oldStatus !== isOnline) {
                console.log(`üìä –°—Ç–∞—Ç—É—Å ${username} –∏–∑–º–µ–Ω–∏–ª—Å—è: ${oldStatus ? '–æ–Ω–ª–∞–π–Ω' : '–æ—Ñ—Ñ–ª–∞–π–Ω'} -> ${isOnline ? '–æ–Ω–ª–∞–π–Ω' : '–æ—Ñ—Ñ–ª–∞–π–Ω'}`);
            }
        }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ —á–∞—Ç–æ–≤
    const chatItems = document.querySelectorAll('.chat-item');
    chatItems.forEach(item => {
        const usernameElement = item.querySelector('.username');
        if (usernameElement && usernameElement.textContent === `@${username}`) {
            const statusElement = item.querySelector('.avatar-status-indicator');

            if (statusElement) {
                statusElement.className = `avatar-status-indicator ${isOnline ? 'online' : ''}`;
            }
        }
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ —á–∞—Ç–∞, –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫
    if (currentChat === username) {
        const displayName = chatTitle.querySelector('div') ? chatTitle.querySelector('div').textContent : username;

        chatTitle.innerHTML = `
            <div>${displayName}</div>
            <div style="font-size: 12px; color: #95A5A6; font-weight: 400; margin-top: 2px;">${lastSeenText}</div>
        `;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –∞–≤–∞—Ç–∞—Ä–∫–µ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ —á–∞—Ç–∞
        updateChatAvatarStatus(isOnline);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞, –µ—Å–ª–∏ –ø–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–µ–Ω
    if (userSearch.value.trim() !== '') {
        const searchItems = document.querySelectorAll('.chat-item');
        searchItems.forEach(item => {
            const usernameElement = item.querySelector('.username');
            if (usernameElement && usernameElement.textContent === `@${username}`) {
                const statusElement = item.querySelector('.avatar-status-indicator');

                if (statusElement) {
                    statusElement.className = `avatar-status-indicator ${isOnline ? 'online' : ''}`;
                }
            }
        });
    }
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
window.addEventListener('online', () => {
    console.log('üåê –°–µ—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    hideConnectionError();
    if (currentUser && !isConnected && !isReconnecting) {
        attemptReconnect();
    }
});

window.addEventListener('offline', () => {
    console.log('üåê –°–µ—Ç—å –ø–æ—Ç–µ—Ä—è–Ω–∞');
    showConnectionError('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É');
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
function checkConnectionHealth() {
    if (!currentUser) return;

    if (!isConnected && !isReconnecting) {
        console.log('üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ—Ç–µ—Ä—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –Ω–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
        attemptReconnect();
    } else if (isConnected) {
        // –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º ping –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ
        socket.emit('ping');
        lastActivity = Date.now();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
setInterval(checkConnectionHealth, 30000);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–µ—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
let connectionLostTime = null;

function handleSocketDisconnect(reason) {
    connectionLostTime = Date.now();
    console.log('üî¥ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ –≤:', new Date(connectionLostTime));
}

function handleSocketConnect() {
    if (connectionLostTime) {
        const reconnectTime = Date.now() - connectionLostTime;
        console.log(`‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ ${Math.round(reconnectTime / 1000)} —Å–µ–∫—É–Ω–¥`);
        connectionLostTime = null;

        if (currentUser) {
            socket.emit('user-online', currentUser.username);
            subscribeToUserStatuses();

            setTimeout(() => {
                loadUserChats();
                updateAllUserStatuses();

                if (currentChatId) {
                    socket.emit('join-chat', currentChatId);
                }
            }, 1000);
        }
    }
}
